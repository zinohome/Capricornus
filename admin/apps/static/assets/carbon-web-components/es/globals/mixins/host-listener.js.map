{"version":3,"sources":["globals/mixins/host-listener.ts"],"names":["on","EVENT_NAME_FORMAT","HostListenerMixin","Base","HostListenerMixinImpl","Set","connectedCallback","hostListeners","constructor","_hostListeners","Object","keys","forEach","listenerName","type","tokens","exec","Error","targetName","unprefixedType","target","document","ownerDocument","window","defaultView","parentRoot","getRootNode","shadowRoot","options","_handles","add","disconnectedCallback","handle","release","delete"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,EAAP,MAAe,yCAAf;;AAGA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,uDAA1B;AAEA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAwCC,IAArC,IAAiD;AACzE;AACF;AACA;AACE,QAAMC,qBAAN,SAAoCD,IAApC,CAAyC;AAAA;AAAA;;AAAA,wCAKf,IAAIE,GAAJ,EALe;AAAA;;AAKJ;AAEnCC,IAAAA,iBAAiB,GAAG;AAClB;AACA,YAAMA,iBAAN;AACA,YAAMC,aAAa,GAAI,KAAKC,WAAN,CAAmDC,cAAzE;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYJ,aAAZ,EAA2BK,OAA3B,CAAmCC,YAAY,IAAI;AACjDH,QAAAA,MAAM,CAACC,IAAP,CAAYJ,aAAa,CAACM,YAAD,CAAzB,EAAyCD,OAAzC,CAAiDE,IAAI,IAAI;AAAA;;AACvD;AACA,gBAAMC,MAAM,GAAGd,iBAAiB,CAACe,IAAlB,CAAuBF,IAAvB,CAAf;;AACA,cAAI,CAACC,MAAL,EAAa;AACX,kBAAM,IAAIE,KAAJ,CAAW,mCAAkCJ,YAAa,EAA1D,CAAN;AACD;;AACD,gBAAM,IAAKK,UAAL,EAAiBC,cAAjB,IAAmCJ,MAAzC;AACA,gBAAMK,MAAmB,GACvB;AACEC,YAAAA,QAAQ,EAAE,KAAKC,aADjB;AAEEC,YAAAA,MAAM,EAAE,KAAKD,aAAL,CAAoBE,WAF9B;AAGEC,YAAAA,UAAU,EAAE,KAAKC,WAAL,EAHd;AAIEC,YAAAA,UAAU,EAAE,KAAKA;AAJnB,YAKET,UALF,KAKiB,IANnB;AAQA,gBAAM;AAAEU,YAAAA;AAAF,cAAcrB,aAAa,CAACM,YAAD,CAAb,CAA4BC,IAA5B,CAApB;;AAEA,eAAKe,QAAL,CAAcC,GAAd,CACE9B,EAAE,CACAoB,MADA,qBAEE,KAAKZ,WAAN,CAAkCW,cAAlC,CAFD,6DAEsDA,cAFtD,EAGA,KAAKN,YAAL,CAHA,EAIAe,OAJA,CADJ;AAQD,SAzBD;AA0BD,OA3BD;AA4BD;;AAEDG,IAAAA,oBAAoB,GAAG;AACrB,WAAKF,QAAL,CAAcjB,OAAd,CAAsBoB,MAAM,IAAI;AAC9BA,QAAAA,MAAM,CAACC,OAAP;;AACA,aAAKJ,QAAL,CAAcK,MAAd,CAAqBF,MAArB;AACD,OAHD,EADqB,CAKrB;;;AACA,YAAMD,oBAAN;AACD;AAED;AACJ;AACA;AACA;AAOY;;;AA5D+B;;AAJgC,kBAInE3B,qBAJmE,oBAgEnE,EAhEmE;;AAmEzE,SAAOA,qBAAP;AACD,CApED;;AAsEA,eAAeF,iBAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport on from 'carbon-components/es/globals/js/misc/on';\nimport Handle from '../internal/handle';\n\n/**\n * The format for the event name used by `@HostListener` decorator.\n */\nconst EVENT_NAME_FORMAT = /^((document|window|parentRoot|shadowRoot):)?([\\w-]+)$/;\n\n/**\n * @param Base The base class.\n * @returns A mix-in that sets up and cleans up event listeners defined by `@HostListener` decorator.\n */\nconst HostListenerMixin = <T extends Constructor<HTMLElement>>(Base: T) => {\n  /**\n   * A mix-in class that sets up and cleans up event listeners defined by `@HostListener` decorator.\n   */\n  class HostListenerMixinImpl extends Base {\n    /**\n     * The list of handles managed by this mix-in.\n     * @private\n     */\n    _handles: Set<Handle> = new Set(); // Not using TypeScript `private` due to: microsoft/TypeScript#17744\n\n    connectedCallback() {\n      // @ts-ignore: Until `connectedCallback` is added to `HTMLElement` definition\n      super.connectedCallback();\n      const hostListeners = (this.constructor as typeof HostListenerMixinImpl)._hostListeners;\n      Object.keys(hostListeners).forEach(listenerName => {\n        Object.keys(hostListeners[listenerName]).forEach(type => {\n          // Parses `document:click`/`window:click` format\n          const tokens = EVENT_NAME_FORMAT.exec(type);\n          if (!tokens) {\n            throw new Error(`Could not parse the event name: ${listenerName}`);\n          }\n          const [, , targetName, unprefixedType] = tokens;\n          const target: EventTarget =\n            {\n              document: this.ownerDocument,\n              window: this.ownerDocument!.defaultView,\n              parentRoot: this.getRootNode(),\n              shadowRoot: this.shadowRoot,\n            }[targetName] || this;\n\n          const { options } = hostListeners[listenerName][type];\n\n          this._handles.add(\n            on(\n              target,\n              ((this.constructor as typeof Base)[unprefixedType] ?? unprefixedType) as keyof HTMLElementEventMap,\n              this[listenerName],\n              options\n            )\n          );\n        });\n      });\n    }\n\n    disconnectedCallback() {\n      this._handles.forEach(handle => {\n        handle.release();\n        this._handles.delete(handle);\n      });\n      // @ts-ignore: Until `disconnectedCallback` is added to `HTMLElement` definition\n      super.disconnectedCallback();\n    }\n\n    /**\n     * The map, keyed by method name, of event listeners that should be attached to host element or host document.\n     * @private\n     */\n    static _hostListeners: {\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    } = {}; // Not using TypeScript `private` due to: microsoft/TypeScript#17744\n  }\n\n  return HostListenerMixinImpl;\n};\n\nexport default HostListenerMixin;\n"],"file":"host-listener.js"}