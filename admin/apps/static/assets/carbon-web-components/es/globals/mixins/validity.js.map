{"version":3,"sources":["globals/mixins/validity.ts"],"names":["VALIDATION_STATUS","ValidityMixin","Base","ValidityMixinImpl","_getValidityMessage","state","NO_ERROR","ERROR_REQUIRED","requiredValidityMessage","_testValidity","required","value","checkValidity","status","dispatchEvent","CustomEvent","bubbles","cancelable","composed","invalid","validityMessage","setCustomValidity","Boolean"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAYA,iBAAZ;AAYA;AACA;AACA;AACA;;WAfYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAgBZ,MAAMC,aAAa,GAAwCC,IAArC,IAAiD;AACrE,QAAeC,iBAAf,SAAyCD,IAAzC,CAA8C;AAC5C;AACA;;AACA;AACJ;AACA;AACA;AACA;AACIE,IAAAA,mBAAmB,CAACC,KAAD,EAAgB;AACjC,aAAO;AACL,SAACL,iBAAiB,CAACM,QAAnB,GAA8B,EADzB;AAEL,SAACN,iBAAiB,CAACO,cAAnB,GAAoC,KAAKC;AAFpC,QAGLH,KAHK,CAAP;AAID,KAb2C,CAe5C;AACA;;AACA;AACJ;AACA;AACA;AACA;;;AACII,IAAAA,aAAa,GAAW;AACtB,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAsB,IAA5B;AACA,aAAOD,QAAQ,IAAI,CAACC,KAAb,GAAqBX,iBAAiB,CAACO,cAAvC,GAAwDP,iBAAiB,CAACM,QAAjF;AACD;AAED;AACJ;AACA;;;AAuBI;AACJ;AACA;AACA;AACA;AACIM,IAAAA,aAAa,GAAG;AACd,YAAMC,MAAM,GAAG,KAAKJ,aAAL,EAAf;;AACA,UAAII,MAAM,KAAKb,iBAAiB,CAACM,QAAjC,EAA2C;AACzC,YACE,KAAKQ,aAAL,CACE,IAAIC,WAAJ,CAAgB,SAAhB,EAA2B;AACzBC,UAAAA,OAAO,EAAE,KADgB;AAEzBC,UAAAA,UAAU,EAAE,IAFa;AAGzBC,UAAAA,QAAQ,EAAE;AAHe,SAA3B,CADF,CADF,EAQE;AACA,eAAKC,OAAL,GAAe,IAAf;AACA,eAAKC,eAAL,GAAuB,KAAKhB,mBAAL,CAAyBS,MAAzB,CAAvB;AACD;;AACD,eAAO,KAAP;AACD;;AACD,WAAKM,OAAL,GAAe,KAAf;AACA,WAAKC,eAAL,GAAuB,EAAvB;AACA,aAAO,IAAP;AACD;AAED;AACJ;AACA;AACA;;;AACIC,IAAAA,iBAAiB,CAACD,eAAD,EAA0B;AACzC,WAAKD,OAAL,GAAeG,OAAO,CAACF,eAAD,CAAtB;AACA,WAAKA,eAAL,GAAuBA,eAAvB;AACD;;AAtF2C;;AAwF9C,SAAOjB,iBAAP;AACD,CA1FD;;AA4FA,eAAeF,aAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Form validation status.\n */\nexport enum VALIDATION_STATUS {\n  /**\n   * One indicating no validation error.\n   */\n  NO_ERROR = '',\n\n  /**\n   * One indicating missing required value.\n   */\n  ERROR_REQUIRED = 'required',\n}\n\n/**\n * @param Base The base class.\n * @returns A mix-in implementing `.setCustomValidity()` method.\n */\nconst ValidityMixin = <T extends Constructor<HTMLElement>>(Base: T) => {\n  abstract class ValidityMixinImpl extends Base {\n    // Not using TypeScript `protected` due to: microsoft/TypeScript#17744\n    // Using `string` instead of `VALIDATION_STATUS` until we can require TypeScript 3.8\n    /**\n     * @param state The form validation status.\n     * @returns The form validation error messages associated with the given status.\n     * @protected\n     */\n    _getValidityMessage(state: string) {\n      return {\n        [VALIDATION_STATUS.NO_ERROR]: '',\n        [VALIDATION_STATUS.ERROR_REQUIRED]: this.requiredValidityMessage,\n      }[state];\n    }\n\n    // Not using TypeScript `protected` due to: microsoft/TypeScript#17744\n    // Using `string` instead of `VALIDATION_STATUS` until we can require TypeScript 3.8\n    /**\n     * Checks if the value meets the constraints.\n     * @returns `VALIDATION_STATUS.NO_ERROR` if the value meets the constraints. Some other values otherwise.\n     * @protected\n     */\n    _testValidity(): string {\n      const { required, value } = this;\n      return required && !value ? VALIDATION_STATUS.ERROR_REQUIRED : VALIDATION_STATUS.NO_ERROR;\n    }\n\n    /**\n     * `true` to show the UI of the invalid state.\n     */\n    abstract invalid: boolean;\n\n    /**\n     * `true` if the value is required.\n     */\n    abstract required: boolean;\n\n    /**\n     * The special validity message for `required`.\n     */\n    abstract requiredValidityMessage: string;\n\n    /**\n     * The validity message.\n     */\n    abstract validityMessage: string;\n\n    /**\n     * The value.\n     */\n    abstract value: string;\n\n    /**\n     * Checks if the value meets the constraints.\n     * Fires cancelable `invalid` event if it doesn't.\n     * @returns `true` if the value meets the constraints. `false` otherwise.\n     */\n    checkValidity() {\n      const status = this._testValidity();\n      if (status !== VALIDATION_STATUS.NO_ERROR) {\n        if (\n          this.dispatchEvent(\n            new CustomEvent('invalid', {\n              bubbles: false,\n              cancelable: true,\n              composed: false,\n            })\n          )\n        ) {\n          this.invalid = true;\n          this.validityMessage = this._getValidityMessage(status);\n        }\n        return false;\n      }\n      this.invalid = false;\n      this.validityMessage = '';\n      return true;\n    }\n\n    /**\n     * Sets the given custom validity message.\n     * @param validityMessage The custom validity message\n     */\n    setCustomValidity(validityMessage: string) {\n      this.invalid = Boolean(validityMessage);\n      this.validityMessage = validityMessage;\n    }\n  }\n  return ValidityMixinImpl;\n};\n\nexport default ValidityMixin;\n"],"file":"validity.js"}