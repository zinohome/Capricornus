{"version":3,"sources":["globals/wrappers/createReactCustomElementType.ts"],"names":["Component","createElement","forwardRef","on","mergeRefs","refs","el","forEach","ref","Object","current","convertProp","prop","descriptor","event","serialize","undefined","convertProps","props","keys","reduce","acc","propName","descriptorItem","converted","attribute","attachEventListeners","elem","callback","handles","Set","eventDescriptor","name","options","add","release","handle","delete","createReactCustomElementType","nonAttributeProps","filter","CustomElementType","listener","call","currentTarget","_elem","_eventListenersHandle","_handleEvent","updateProps","prevProps","prevValue","value","componentDidMount","componentDidUpdate","render","children","innerRef","mergedRef","_handleElemRef","booleanSerializer","numberSerializer","String","objectSerializer","JSON","stringify"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component, createElement, forwardRef } from 'react';\nimport on from 'carbon-components/es/globals/js/misc/on';\nimport Handle from '../internal/handle';\n\n/**\n * A descriptor for a React event prop of a custom element.\n */\ninterface CustomElementEventDescriptor {\n  /**\n   * The event name.\n   */\n  name: string;\n\n  /**\n   * A boolean to detemine usage of capture mode or the event options.\n   */\n  options?: boolean | EventListenerOptions;\n}\n\n/**\n * A descriptor for a React prop for an attribute of a custom element.\n */\ninterface CustomElementPropDescriptor {\n  /**\n   * The attribute name for the prop.\n   */\n  attribute?: string | false;\n\n  /**\n   * The event name (or descriptor) for the prop.\n   */\n  event?: string | CustomElementEventDescriptor;\n\n  /**\n   * A function that takes a property value and returns the corresponding attribute value.\n   */\n  serialize?: (value: any) => string | void;\n}\n\n/**\n * A descriptor for a set of React props for attributes of a custom element.\n */\ninterface CustomElementPropsDescriptor {\n  [propName: string]: CustomElementPropDescriptor;\n}\n\n/**\n * React props for the component `createCustomElementType()` generates.\n */\ninterface CustomElementTypeProps {\n  /**\n   * Ordinal prop.\n   */\n  [propName: string]: any;\n\n  /**\n   * Child nodes.\n   */\n  children?: React.ReactNode;\n}\n\n/**\n * @param refs List of React refs to merge.\n * @returns Merged React ref.\n */\nconst mergeRefs =\n  <T>(...refs: React.Ref<T>[]) =>\n  el => {\n    refs.forEach(ref => {\n      // https://github.com/facebook/react/issues/13029#issuecomment-410002316\n      if (typeof ref === 'function') {\n        ref(el);\n      } else if (Object(ref) === ref) {\n        // `React.Ref.current` is read-only for regular use case, but we update it here\n        (ref as { current: T }).current = el;\n      }\n    });\n  };\n\n/**\n * @param prop A prop value.\n * @param descriptor A React prop descriptor.\n * @returns The corresponding attribute value for the given prop value.\n */\nconst convertProp = (prop: any, descriptor: CustomElementPropDescriptor) => {\n  if (!descriptor) {\n    return prop;\n  }\n  const { event, serialize } = descriptor;\n  if (event) {\n    // Events are not set as props, we use DOM `addEventListener()` instead\n    return undefined;\n  }\n  return !serialize ? prop : serialize(prop);\n};\n\n/**\n * @param props A set of React props.\n * @param descriptor A set of React prop desciptor.\n * @returns The set of React props to set to a custom element, corresponding to the given React props.\n */\nconst convertProps = (props: CustomElementTypeProps, descriptor: CustomElementPropsDescriptor) =>\n  Object.keys(props).reduce((acc, propName) => {\n    const { [propName]: descriptorItem } = descriptor;\n    const converted = convertProp(props[propName], descriptorItem);\n    const { attribute } = descriptorItem ?? {};\n    return attribute === false\n      ? acc\n      : {\n          ...acc,\n          [attribute || propName]: converted,\n        };\n  }, {});\n\n/**\n * Attaches listeners of custom events, to a custom element.\n * @param elem The custom element.\n * @param descriptor An object, keyed by prop name, of data that may have custom event names.\n * @param callback A callback function that runs as the custom events fire.\n * @returns A handle that allows to release all event listeners attached.\n */\nconst attachEventListeners = (\n  elem: HTMLElement,\n  descriptor: CustomElementPropsDescriptor,\n  callback: (name: string, event: Event) => void\n): Handle => {\n  const handles = new Set<Handle>();\n  Object.keys(descriptor).forEach(propName => {\n    if (descriptor[propName]) {\n      const { event: eventDescriptor } = descriptor[propName];\n      const name =\n        Object(eventDescriptor) !== eventDescriptor\n          ? (eventDescriptor as string)\n          : (eventDescriptor as CustomElementEventDescriptor).name;\n      const options =\n        Object(eventDescriptor) !== eventDescriptor ? undefined : (eventDescriptor as CustomElementEventDescriptor).options;\n      if (name) {\n        handles.add(\n          on(\n            elem,\n            name,\n            event => {\n              callback(propName, event);\n            },\n            options\n          )\n        );\n      }\n    }\n  });\n  return {\n    release() {\n      handles.forEach(handle => {\n        handle.release();\n        handles.delete(handle);\n      });\n      return null;\n    },\n  };\n};\n\n/**\n * @param name The tag name of the custom element.\n * @param descriptor A descriptor for a set of React props for attributes of a custom element.\n * @returns A React component working as a wrapper for the given custom element.\n * @example\n * import { render } from 'react-dom';\n * import createCustomElementType, { booleanSerializer } from '/path/to/createCustomElementType';\n *\n * const BXDropdown = createCustomElementType('bx-dropdown', {\n *   disabled: {\n *     // Sets `disabled` attribute when the React prop value is truthy, unsets otherwise\n *     serialize: booleanSerializer,\n *   },\n *   helperText: {\n *     // Maps `helperText` React prop to `helper-text` attribute\n *     attribute: 'helper-text',\n *   },\n *   onBeforeSelect: {\n *     // Sets `onBeforeSelect` React prop value as a listener of `bx-dropdown-beingselected` custom event\n *     event: 'bx-dropdown-beingselected',\n *   },\n * });\n *\n * render(\n *   (\n *     <BXDropdown\n *       disabled={true}\n *       helperText=\"some-helper-text\"\n *       onBeforeSelect={event => { console.log('bx-dropdown-beingselected is fired!', event); }}>\n *       <bx-dropdown-item value=\"all\">Option 1</bx-dropdown-item>\n *       <bx-dropdown-item value=\"cloudFoundry\">Option 2</bx-dropdown-item>\n *       <bx-dropdown-item value=\"staging\">Option 3</bx-dropdown-item>\n *     </BXDropdown>\n *   )\n *   document.body\n * );\n */\nconst createReactCustomElementType = (name: string, descriptor: CustomElementPropsDescriptor) => {\n  /**\n   * Array of React prop names that should be mapped to DOM properties instead of attributes.\n   */\n  const nonAttributeProps = Object.keys(descriptor).filter(propName => {\n    const { [propName]: descriptorItem } = descriptor;\n    const { attribute } = descriptorItem ?? {};\n    return attribute === false;\n  });\n\n  /**\n   * A React component working as a wrapper for the custom element.\n   */\n  class CustomElementType extends Component<CustomElementTypeProps> {\n    /**\n     * The element.\n     */\n    private _elem: HTMLElement | null = null;\n\n    /**\n     * The handle that allows to release all event listeners attached to this custom element.\n     */\n    private _eventListenersHandle: Handle | null = null;\n\n    /**\n     * The callback function that runs as the custom events fire.\n     * @param propName The React prop name associated with the event listener.\n     * @param event The event.\n     */\n    private _handleEvent = (propName: string, event: Event) => {\n      const { [propName]: listener } = this.props;\n      if (listener) {\n        listener.call(event.currentTarget, event);\n      }\n    };\n\n    /**\n     * Handles getting/losing the React `ref` object of this custom element.\n     * @param elem The custom element.\n     */\n    private _handleElemRef = (elem: HTMLElement) => {\n      this._elem = elem;\n      if (this._eventListenersHandle) {\n        this._eventListenersHandle.release();\n        this._eventListenersHandle = null;\n      }\n      if (elem) {\n        this._eventListenersHandle = attachEventListeners(elem, descriptor, this._handleEvent);\n      }\n    };\n\n    /**\n     * Reflects change in React props to DOM properties.\n     * @param prevProps The previous props.\n     */\n    updateProps(prevProps: { [key: string]: any } = {}) {\n      const { props, _elem: elem } = this;\n      nonAttributeProps.forEach(propName => {\n        const { [propName]: prevValue } = prevProps;\n        const { [propName]: value } = props;\n        if (prevValue !== value) {\n          elem![propName] = value;\n        }\n      });\n    }\n\n    componentDidMount() {\n      this.updateProps();\n    }\n\n    componentDidUpdate(prevProps) {\n      this.updateProps(prevProps);\n    }\n\n    render() {\n      const { children, innerRef, ...props } = this.props;\n      const mergedRef = mergeRefs<HTMLElement>(innerRef, this._handleElemRef);\n      return createElement(name, { ref: mergedRef, ...convertProps(props, descriptor) }, children);\n    }\n  }\n\n  return forwardRef<HTMLElement, CustomElementTypeProps>((props, ref) =>\n    createElement(CustomElementType, { ...props, innerRef: ref })\n  );\n};\n\n/**\n * @param value A React prop value.\n * @returns Serialized version of React prop value, as a boolean attribute in a custom element.\n */\nexport const booleanSerializer = value => (!value ? undefined : '');\n\n/**\n * @param value A React prop value.\n * @returns Serialized version of React prop value, as a number attribute in a custom element.\n */\nexport const numberSerializer = value => (value == null ? value : String(value));\n\n/**\n * @param value A React prop value.\n * @returns Serialized version of React prop value, as a object attribute in a custom element.\n */\nexport const objectSerializer = value => (value == null ? value : JSON.stringify(value));\n\nexport default createReactCustomElementType;\n"],"file":"createReactCustomElementType.js"}