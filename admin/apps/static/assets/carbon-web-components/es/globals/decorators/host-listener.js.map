{"version":3,"sources":["globals/decorators/host-listener.ts"],"names":["setHostListener","type","options","Clazz","name","hostListeners","_hostListeners","Error","HostListenerStandard","descriptor","kind","key","placement","finisher","HostListener","targetOrDescriptor","constructor"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,CAACC,IAAD,EAAeC,OAAf,EAA2DC,KAA3D,EAAkEC,IAAlE,KAAmF;AACzG,QAAMC,aAAa,GAAGF,KAAK,CAACG,cAA5B;;AACA,MAAI,CAACD,aAAL,EAAoB;AAClB,UAAM,IAAIE,KAAJ,CAAU,6FAAV,CAAN;AACD;;AACD,MAAI,CAACF,aAAa,CAACD,IAAD,CAAlB,EAA0B;AACxBC,IAAAA,aAAa,CAACD,IAAD,CAAb,GAAsB,EAAtB;AACD;;AACDC,EAAAA,aAAa,CAACD,IAAD,CAAb,CAAoBH,IAApB,IAA4B;AAAEC,IAAAA;AAAF,GAA5B;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,oBAAoB,GAAG,CAACP,IAAD,EAAeC,OAAf,EAA2DO,UAA3D,KAA0E;AACrG,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,GAAR;AAAaC,IAAAA;AAAb,MAA2BH,UAAjC;;AACA,MAAI,EAAGC,IAAI,KAAK,QAAT,IAAqBE,SAAS,KAAK,WAApC,IAAqDF,IAAI,KAAK,OAAT,IAAoBE,SAAS,KAAK,KAAzF,CAAJ,EAAsG;AACpG,UAAM,IAAIL,KAAJ,CAAU,2GAAV,CAAN;AACD;;AACD,yCACKE,UADL;AAEEI,IAAAA,QAAQ,CAACV,KAAD,EAAQ;AACdH,MAAAA,eAAe,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuBQ,GAAvB,CAAf;AACD;;AAJH;AAMD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,YAAY,GAAG,CAACb,IAAD,EAAeC,OAAf,KAA+D,CAACa,kBAAD,EAAqBX,IAArB,KAClF,OAAOA,IAAP,KAAgB,WAAhB,GACIJ,eAAe,CAACC,IAAD,EAAOC,OAAP,EAAiBa,kBAAkB,CAACC,WAApC,EAAiDZ,IAAjD,CADnB,GAEII,oBAAoB,CAACP,IAAD,EAAOC,OAAP,EAAiBa,kBAAjB,CAH1B;;AAKA,eAAeD,YAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Puts an event listener to an internal table for `@HostListener()`.\n * @param type\n *   The event type. Can be prefixed with `document:` or `window:`.\n *   The event listener is attached to host element's owner document or its default view in such case.\n * @param options The event listener options.\n * @param Clazz The target class.\n * @param name The method name in the given target class that works as the event listener.\n */\nconst setHostListener = (type: string, options: boolean | AddEventListenerOptions, Clazz, name: string) => {\n  const hostListeners = Clazz._hostListeners;\n  if (!hostListeners) {\n    throw new Error('The method `@HostListener()` is defined on has to be of a class that has `HostListerMixin`.');\n  }\n  if (!hostListeners[name]) {\n    hostListeners[name] = {};\n  }\n  hostListeners[name][type] = { options };\n};\n\n/**\n * @param type\n *   The event type. Can be prefixed with `document:` or `window:`.\n *   The event listener is attached to host element's owner document or its default view in such case.\n * @param options The event listener options.\n * @param descriptor The original class element descriptor of the event listener method.\n * @returns The updated class element descriptor with `@HostListener()` decorator.\n */\nconst HostListenerStandard = (type: string, options: boolean | AddEventListenerOptions, descriptor) => {\n  const { kind, key, placement } = descriptor;\n  if (!((kind === 'method' && placement === 'prototype') || (kind === 'field' && placement === 'own'))) {\n    throw new Error('`@HostListener()` must be defined on instance methods, but you may have defined it on static, field, etc.');\n  }\n  return {\n    ...descriptor,\n    finisher(Clazz) {\n      setHostListener(type, options, Clazz, key);\n    },\n  };\n};\n\n/**\n * A decorator to add event listener to the host element, or its `document`/`window`, of a custom element.\n * The `target` must extend `HostListenerMixin`.\n * @param type\n *   The event type. Can be prefixed with `document:` or `window:`.\n *   The event listener is attached to host element's owner document or its default view in such case.\n * @param options The event listener options.\n */\nconst HostListener = (type: string, options?: boolean | AddEventListenerOptions) => (targetOrDescriptor, name: string) =>\n  typeof name !== 'undefined'\n    ? setHostListener(type, options!, targetOrDescriptor.constructor, name)\n    : HostListenerStandard(type, options!, targetOrDescriptor);\n\nexport default HostListener;\n"],"file":"host-listener.js"}