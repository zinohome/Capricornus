{"version":3,"sources":["globals/decorators/host-listener.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AA2CH;;;;;;;GAOG;AACH,QAAA,MAAM,YAAY,SAAU,MAAM,8FAA6E,MAAM,QAGvD,CAAC;AAE/D,eAAe,YAAY,CAAC","file":"host-listener.d.ts","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Puts an event listener to an internal table for `@HostListener()`.\n * @param type\n *   The event type. Can be prefixed with `document:` or `window:`.\n *   The event listener is attached to host element's owner document or its default view in such case.\n * @param options The event listener options.\n * @param Clazz The target class.\n * @param name The method name in the given target class that works as the event listener.\n */\nconst setHostListener = (type: string, options: boolean | AddEventListenerOptions, Clazz, name: string) => {\n  const hostListeners = Clazz._hostListeners;\n  if (!hostListeners) {\n    throw new Error('The method `@HostListener()` is defined on has to be of a class that has `HostListerMixin`.');\n  }\n  if (!hostListeners[name]) {\n    hostListeners[name] = {};\n  }\n  hostListeners[name][type] = { options };\n};\n\n/**\n * @param type\n *   The event type. Can be prefixed with `document:` or `window:`.\n *   The event listener is attached to host element's owner document or its default view in such case.\n * @param options The event listener options.\n * @param descriptor The original class element descriptor of the event listener method.\n * @returns The updated class element descriptor with `@HostListener()` decorator.\n */\nconst HostListenerStandard = (type: string, options: boolean | AddEventListenerOptions, descriptor) => {\n  const { kind, key, placement } = descriptor;\n  if (!((kind === 'method' && placement === 'prototype') || (kind === 'field' && placement === 'own'))) {\n    throw new Error('`@HostListener()` must be defined on instance methods, but you may have defined it on static, field, etc.');\n  }\n  return {\n    ...descriptor,\n    finisher(Clazz) {\n      setHostListener(type, options, Clazz, key);\n    },\n  };\n};\n\n/**\n * A decorator to add event listener to the host element, or its `document`/`window`, of a custom element.\n * The `target` must extend `HostListenerMixin`.\n * @param type\n *   The event type. Can be prefixed with `document:` or `window:`.\n *   The event listener is attached to host element's owner document or its default view in such case.\n * @param options The event listener options.\n */\nconst HostListener = (type: string, options?: boolean | AddEventListenerOptions) => (targetOrDescriptor, name: string) =>\n  typeof name !== 'undefined'\n    ? setHostListener(type, options!, targetOrDescriptor.constructor, name)\n    : HostListenerStandard(type, options!, targetOrDescriptor);\n\nexport default HostListener;\n"]}