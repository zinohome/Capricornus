{"version":3,"sources":["globals/directives/spread.ts"],"names":["PropertyPart","directive","attributesMapCache","WeakMap","spread","attributesInfo","part","committer","name","parts","length","Error","element","oldAttributesInfo","get","Object","keys","forEach","removeAttribute","value","is","setAttribute","set"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAeA,YAAf,EAA6BC,SAA7B,QAA8C,UAA9C;;AAMA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,IAAIC,OAAJ,EAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAGH,SAAS,CAAEI,cAAD,IAAqCC,IAAD,IAAgB;AAC3E;AACA,MAAI,EAAEA,IAAI,YAAYN,YAAlB,KAAmCM,IAAI,CAACC,SAAL,CAAeC,IAAf,KAAwB,IAA3D,IAAmEF,IAAI,CAACC,SAAL,CAAeE,KAAf,CAAqBC,MAArB,GAA8B,CAArG,EAAwG;AACtG,UAAM,IAAIC,KAAJ,CAAU,oGAAV,CAAN;AACD;;AAED,QAAM;AAAEJ,IAAAA;AAAF,MAAgBD,IAAtB;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAcL,SAApB,CAP2E,CAS3E;;AACA,QAAMM,iBAAiB,GAAGX,kBAAkB,CAACY,GAAnB,CAAuBR,IAAvB,CAA1B;;AACA,MAAIO,iBAAJ,EAAuB;AACrBE,IAAAA,MAAM,CAACC,IAAP,CAAYH,iBAAZ,EAA+BI,OAA/B,CAAuCT,IAAI,IAAI;AAC7C,UAAI,EAAEA,IAAI,IAAIH,cAAV,CAAJ,EAA+B;AAC7BO,QAAAA,OAAO,CAACM,eAAR,CAAwBV,IAAxB;AACD;AACF,KAJD;AAKD,GAjB0E,CAmB3E;;;AACAO,EAAAA,MAAM,CAACC,IAAP,CAAYX,cAAZ,EAA4BY,OAA5B,CAAoCT,IAAI,IAAI;AAC1C,UAAMW,KAAK,GAAGd,cAAc,CAACG,IAAD,CAA5B;;AACA,QAAI,CAAC,CAACK,iBAAD,IAAsB,CAACE,MAAM,CAACK,EAAP,CAAUD,KAAV,EAAiBN,iBAAiB,CAACL,IAAD,CAAlC,CAAxB,KAAsE,OAAOW,KAAP,KAAiB,WAA3F,EAAwG;AACtGP,MAAAA,OAAO,CAACS,YAAR,CAAqBb,IAArB,EAA2BW,KAA3B;AACD;AACF,GALD,EApB2E,CA2B3E;;AACAjB,EAAAA,kBAAkB,CAACoB,GAAnB,CAAuBhB,IAAvB,EAA6BD,cAA7B;AACD,CA7BuB,CAAxB;AA+BA,eAAeD,MAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Part, PropertyPart, directive } from 'lit-html';\n\nexport interface AttributesInfo {\n  readonly [name: string]: string;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst attributesMapCache = new WeakMap();\n\n/**\n * A directive that applies attributes from a key-value pairs.\n * This must be used in the `...` name and must be the only part used in the attribute.\n * It applies the key-value pairs in the `attributesInfo` argument\n * and sets them as attribute name/value pairs.\n * @param classInfo The key-value pair to be set as the attribute name/value pairs.\n */\nconst spread = directive((attributesInfo: AttributesInfo) => (part: Part) => {\n  // The first character of `...` is interpreted as one for `PropertyPart`\n  if (!(part instanceof PropertyPart) || part.committer.name !== '..' || part.committer.parts.length > 1) {\n    throw new Error('The `spread` directive must be used in with `...` name and must be the only part in the attribute.');\n  }\n\n  const { committer } = part;\n  const { element } = committer;\n\n  // Removes old attributes that are no longer there\n  const oldAttributesInfo = attributesMapCache.get(part);\n  if (oldAttributesInfo) {\n    Object.keys(oldAttributesInfo).forEach(name => {\n      if (!(name in attributesInfo)) {\n        element.removeAttribute(name);\n      }\n    });\n  }\n\n  // Adds new attributes\n  Object.keys(attributesInfo).forEach(name => {\n    const value = attributesInfo[name];\n    if ((!oldAttributesInfo || !Object.is(value, oldAttributesInfo[name])) && typeof value !== 'undefined') {\n      element.setAttribute(name, value);\n    }\n  });\n\n  // Updates the cache\n  attributesMapCache.set(part, attributesInfo);\n});\n\nexport default spread;\n"],"file":"spread.js"}