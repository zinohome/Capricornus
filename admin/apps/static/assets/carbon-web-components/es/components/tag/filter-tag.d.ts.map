{"version":3,"sources":["components/tag/filter-tag.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH,OAAO,EAAwC,UAAU,EAAE,MAAM,aAAa,CAAC;AAM/E,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAG5C,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAI9B;;;GAGG;AAEH,MAAM,CAAC,OAAO,OAAO,WAAY,SAAQ,gBAAyC;IAEhF,SAAS,CAAC,WAAW,EAAG,iBAAiB,CAAC;IAE1C;;;OAGG;IAGH,OAAO,CAAC,YAAY,CAmBlB;IAEF;;OAEG;IAEH,KAAK,SAAkB;IAEvB;;OAEG;IAEH,QAAQ,UAAS;IAEjB;;OAEG;IAEH,IAAI,UAAQ;IAEZ;;OAEG;IAEH,IAAI,WAAoB;IAExB;;OAEG;IAEH,IAAI,WAAgB;IAEpB,MAAM;IAQN;;;OAGG;IACH,MAAM,KAAK,gBAAgB,WAE1B;IAED;;OAEG;IACH,MAAM,KAAK,UAAU,WAEpB;IAED,MAAM,CAAC,MAAM,MAAU;CACxB","file":"filter-tag.d.ts","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html, property, query, customElement, LitElement } from 'lit-element';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport Close16 from '@carbon/icons/lib/close/16';\nimport FocusMixin from '../../globals/mixins/focus';\nimport HostListener from '../../globals/decorators/host-listener';\nimport HostListenerMixin from '../../globals/mixins/host-listener';\nimport { TAG_SIZE, TAG_TYPE } from './defs';\nimport styles from './tag.scss';\n\nexport { TAG_SIZE, TAG_TYPE };\n\nconst { prefix } = settings;\n\n/**\n * Filter tag.\n * @element bx-filter-tag\n */\n@customElement(`${prefix}-filter-tag`)\nexport default class BXFilterTag extends HostListenerMixin(FocusMixin(LitElement)) {\n  @query('button')\n  protected _buttonNode!: HTMLButtonElement;\n\n  /**\n   * Handles `click` event on this element.\n   * @param event The event.\n   */\n  @HostListener('shadowRoot:click')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleClick = (event: MouseEvent) => {\n    if (event.composedPath().indexOf(this._buttonNode!) >= 0) {\n      if (this.disabled) {\n        event.stopPropagation();\n      } else if (this.open) {\n        const init = {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: {\n            triggeredBy: event.target,\n          },\n        };\n        if (this.dispatchEvent(new CustomEvent((this.constructor as typeof BXFilterTag).eventBeforeClose, init))) {\n          this.open = false;\n          this.dispatchEvent(new CustomEvent((this.constructor as typeof BXFilterTag).eventClose, init));\n        }\n      }\n    }\n  };\n\n  /**\n   * Text to show on filter tag \"clear\" buttons. Corresponds to the attribute with the same name\n   */\n  @property({ type: String, reflect: true })\n  title = 'Clear filter';\n\n  /**\n   * `true` if the tag should be disabled\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  /**\n   * `true` if the tag should be open.\n   */\n  @property({ type: Boolean, reflect: true })\n  open = true;\n\n  /**\n   * The size of the tag.\n   */\n  @property({ reflect: true })\n  size = TAG_SIZE.REGULAR;\n\n  /**\n   * The type of the tag.\n   */\n  @property({ reflect: true })\n  type = TAG_TYPE.RED;\n\n  render() {\n    const { disabled } = this;\n    return html`\n      <slot></slot>\n      <button class=\"${prefix}--tag__close-icon\" ?disabled=${disabled}>${Close16({ 'aria-label': this.title })}</button>\n    `;\n  }\n\n  /**\n   * The name of the custom event fired before this tag is being closed upon a user gesture.\n   * Cancellation of this event stops the user-initiated action of closing this tag.\n   */\n  static get eventBeforeClose() {\n    return `${prefix}-filter-tag-beingclosed`;\n  }\n\n  /**\n   * The name of the custom event fired after this tag is closed upon a user gesture.\n   */\n  static get eventClose() {\n    return `${prefix}-filter-tag-closed`;\n  }\n\n  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader\n}\n"]}