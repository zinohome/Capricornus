{"version":3,"sources":["components/code-snippet/code-snippet.ts"],"names":["classMap","html","property","query","customElement","LitElement","ChevronDown16","settings","FocusMixin","_createHandleFeedbackTooltip","createHandleCopyButtonFeedbackTooltip","_renderButton","renderCopyButton","CODE_SNIPPET_COLOR_SCHEME","CODE_SNIPPET_TYPE","styles","prefix","renderExpando","children","handleClick","class","role","renderCode","assistiveText","expanded","classes","Boolean","BXCodeSnippet","ownerDocument","doc","selection","defaultView","getSelection","removeAllRanges","code","createElement","className","pre","textContent","appendChild","body","range","createRange","selectNodeContents","addRange","execCommand","_handleCopyButtonFeedbackTooltip","copyButtonFeedbackTimeout","removeChild","showFeedback","_showCopyButtonFeedback","requestUpdate","_expanded","type","_preNode","preNode","MULTI","getBoundingClientRect","height","_showExpando","attribute","reflect","REGULAR","Number","SINGLE","attachShadow","mode","delegatesFocus","exec","navigator","userAgent","codeAssistiveText","collapseButtonText","copyButtonAssistiveText","copyButtonFeedbackText","expandButtonText","showCopyButtonFeedback","showExpando","_handleClickCopyButton","handleClickCopyButton","_handleClickExpando","handleClickExpando","_handleSlotChange","handleSlotChange","feedbackText","handleClickButton","undefined"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit-html/directives/class-map';\nimport { TemplateResult } from 'lit-html';\nimport { html, property, query, customElement, LitElement } from 'lit-element';\nimport ChevronDown16 from '@carbon/icons/lib/chevron--down/16';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport FocusMixin from '../../globals/mixins/focus';\nimport {\n  _createHandleFeedbackTooltip as createHandleCopyButtonFeedbackTooltip,\n  _renderButton as renderCopyButton,\n} from '../copy-button/copy-button';\nimport { CODE_SNIPPET_COLOR_SCHEME, CODE_SNIPPET_TYPE } from './defs';\nimport styles from './code-snippet.scss';\n\nexport { CODE_SNIPPET_COLOR_SCHEME, CODE_SNIPPET_TYPE };\n\nconst { prefix } = settings;\n\n/**\n * @param values The values to render.\n * @param values.children The child nodes.\n * @param values.handleClick The handler for the `click` event on the button.\n * @returns The template result for the expando.\n */\nconst renderExpando = ({ children, handleClick }: { children: string | TemplateResult; handleClick: EventListener }) => html`\n  <button type=\"button\" class=\"${prefix}--snippet-btn--expand\" @click=\"${handleClick}\">\n    <span id=\"button-text\" class=\"${prefix}--snippet-btn--text\"> ${children} </span>\n    ${ChevronDown16({\n      'aria-labeledby': 'button-text',\n      class: `${prefix}--icon-chevron--down ${prefix}--snippet__icon`,\n      role: 'img',\n    })}\n  </button>\n`;\n\n/**\n * @param values The values to render.\n * @param values.assistiveText The assistive text to announce that the node is for code snippet.\n * @param [values.expanded] `true` to show the expanded state (for multi-line variant).\n * @param values.children The child nodes.\n * @returns The template result for the code snippet.\n */\nconst renderCode = ({\n  assistiveText,\n  expanded,\n  children,\n}: {\n  assistiveText: string;\n  expanded?: boolean;\n  children: string | TemplateResult;\n}) => {\n  const classes = classMap({\n    [`${prefix}--snippet-container`]: true,\n    [`${prefix}-ce--snippet-container--expanded`]: Boolean(expanded),\n  });\n  // Ensures no extra whitespace text node\n  // prettier-ignore\n  return html`\n    <div role=\"textbox\" tabindex=\"0\" class=\"${classes}\" aria-label=\"${assistiveText}\"><code><pre>${children}</pre></code></div>\n  `;\n};\n\n/**\n * Basic code snippet.\n * @element bx-code-snippet\n */\n@customElement(`${prefix}-code-snippet`)\nclass BXCodeSnippet extends FocusMixin(LitElement) {\n  /**\n   * `true` to expand multi-line variant of code snippet.\n   */\n  private _expanded = false;\n\n  /**\n   * `true` to show the feedback tooltip.\n   */\n  private _showCopyButtonFeedback = false;\n\n  /**\n   * `true` to show the expando.\n   */\n  private _showExpando = false;\n\n  /**\n   * Handles `click` event on the copy button.\n   */\n  private _handleClickCopyButton() {\n    const { ownerDocument: doc } = this;\n    const selection = doc!.defaultView!.getSelection();\n    selection!.removeAllRanges();\n    const code = doc!.createElement('code');\n    code.className = `${prefix}--visually-hidden`;\n    const pre = doc!.createElement('pre');\n    pre.textContent = this.textContent;\n    code.appendChild(pre);\n    // Using `<code>` in shadow DOM seems to lose the LFs in some browsers\n    doc!.body.appendChild(code);\n    const range = doc!.createRange();\n    range.selectNodeContents(code);\n    selection!.addRange(range);\n    doc!.execCommand('copy');\n    this._handleCopyButtonFeedbackTooltip(this.copyButtonFeedbackTimeout);\n    doc!.body.removeChild(code);\n    selection!.removeAllRanges();\n  }\n\n  /**\n   * Handles showing/hiding the feedback tooltip.\n   */\n  private _handleCopyButtonFeedbackTooltip = createHandleCopyButtonFeedbackTooltip(\n    ({ showFeedback = false }: { showFeedback?: boolean }) => {\n      this._showCopyButtonFeedback = showFeedback;\n      this.requestUpdate();\n    }\n  );\n\n  /**\n   * Handles `click` event on the expando.\n   */\n  private _handleClickExpando() {\n    this._expanded = !this._expanded;\n    this.requestUpdate();\n  }\n\n  /**\n   * Handles change in slot content to determine if the content\n   */\n  private _handleSlotChange() {\n    const { type, _preNode: preNode } = this;\n    if (type === CODE_SNIPPET_TYPE.MULTI) {\n      if (preNode.getBoundingClientRect().height > 255) {\n        this._showExpando = true;\n        this.requestUpdate();\n      }\n    }\n  }\n\n  /**\n   * The `<pre>` element in the shadow DOM.\n   */\n  @query('pre')\n  private _preNode!: HTMLPreElement;\n\n  /**\n   * An assistive text for screen reader to advice a DOM node is for code snippet.\n   */\n  @property({ attribute: 'code-assistive-text' })\n  codeAssistiveText = 'code-snippet';\n\n  /**\n   * The context content for the collapse button.\n   */\n  @property({ attribute: 'collapse-button-text' })\n  collapseButtonText = 'Show less';\n\n  /**\n   * The color scheme.\n   */\n  @property({ attribute: 'color-scheme', reflect: true })\n  colorScheme = CODE_SNIPPET_COLOR_SCHEME.REGULAR;\n\n  /**\n   * An assistive text for screen reader to announce, telling that the button copies the content to the clipboard.\n   */\n  @property({ attribute: 'copy-button-assistive-text' })\n  copyButtonAssistiveText = 'Copy to clipboard';\n\n  /**\n   * The feedback text for the copy button.\n   */\n  @property({ attribute: 'copy-button-feedback-text' })\n  copyButtonFeedbackText = 'Copied!';\n\n  /**\n   * The number in milliseconds to determine how long the tooltip for the copy button should remain.\n   */\n  @property({ type: Number, attribute: 'copy-button-feedback-timeout' })\n  copyButtonFeedbackTimeout = 2000;\n\n  /**\n   * The context content for the expand button.\n   */\n  @property({ attribute: 'expand-button-text' })\n  expandButtonText = 'Show more';\n\n  /**\n   * The type of code snippet.\n   */\n  @property({ reflect: true })\n  type = CODE_SNIPPET_TYPE.SINGLE;\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: 'open',\n      delegatesFocus: Number((/Safari\\/(\\d+)/.exec(navigator.userAgent) ?? ['', 0])[1]) <= 537,\n    });\n  }\n\n  render() {\n    const {\n      codeAssistiveText,\n      collapseButtonText,\n      copyButtonAssistiveText,\n      copyButtonFeedbackText,\n      expandButtonText,\n      type,\n      _expanded: expanded,\n      _showCopyButtonFeedback: showCopyButtonFeedback,\n      _showExpando: showExpando,\n      _handleClickCopyButton: handleClickCopyButton,\n      _handleClickExpando: handleClickExpando,\n      _handleSlotChange: handleSlotChange,\n    } = this;\n\n    if (type === CODE_SNIPPET_TYPE.SINGLE) {\n      // Ensures no extra whitespace text node\n      // prettier-ignore\n      return html`\n        ${renderCode({\n          assistiveText: codeAssistiveText,\n          expanded,\n          children: html`<slot @slotchange=\"${handleSlotChange}\"></slot>`,\n        })}\n        ${renderCopyButton({\n          assistiveText: copyButtonAssistiveText,\n          feedbackText: copyButtonFeedbackText,\n          showFeedback: showCopyButtonFeedback,\n          handleClickButton: handleClickCopyButton,\n          className: `${prefix}--snippet-button`,\n        })}\n      `;\n    }\n\n    if (type === CODE_SNIPPET_TYPE.MULTI) {\n      // Ensures no extra whitespace text node\n      // prettier-ignore\n      return html`\n        ${renderCode({\n          assistiveText: codeAssistiveText,\n          expanded,\n          children: html`<slot @slotchange=\"${handleSlotChange}\"></slot>`,\n        })}\n        ${renderCopyButton({\n          assistiveText: copyButtonAssistiveText,\n          feedbackText: copyButtonFeedbackText,\n          showFeedback: showCopyButtonFeedback,\n          handleClickButton: handleClickCopyButton,\n          className: `${prefix}--snippet-button`,\n        })}\n        ${!showExpando\n          ? undefined\n          : renderExpando({\n              children: expanded\n                ? html`<slot name=\"collapse-button-text\">${collapseButtonText}</slot>`\n                : html`<slot name=\"expand-button-text\">${expandButtonText}</slot>`,\n              handleClick: handleClickExpando,\n            })}\n      `;\n    }\n\n    // Ensures no extra whitespace text node\n    // prettier-ignore\n    return html`\n      ${renderCopyButton({\n        assistiveText: copyButtonAssistiveText,\n        feedbackText: copyButtonFeedbackText,\n        showFeedback: showCopyButtonFeedback,\n        handleClickButton: handleClickCopyButton,\n        className: `${prefix}--snippet ${prefix}--snippet--inline`,\n        children: html`<code aria-label=\"${codeAssistiveText}\"><slot></slot></code>`,\n      })}\n    `;\n  }\n\n  static styles = styles;\n}\n\nexport default BXCodeSnippet;\n"],"file":"code-snippet.js"}