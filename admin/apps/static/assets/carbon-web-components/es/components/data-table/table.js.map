{"version":3,"sources":["components/data-table/table.ts"],"names":["settings","html","property","customElement","LitElement","forEach","TABLE_COLOR_SCHEME","TABLE_SIZE","styles","prefix","BXTable","reflect","REGULAR","type","Boolean","hasAttribute","setAttribute","changedProperties","has","querySelectorAll","constructor","selectorRowsWithHeader","elem","size"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,0CAArB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,aAAzB,EAAwCC,UAAxC,QAA0D,aAA1D;AACA,SAASC,OAAT,QAAwB,2CAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,QAA/C;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,SAASF,kBAAT,EAA6BC,UAA7B;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAaT,QAAnB;AAEA;AACA;AACA;AACA;;IAEMU,O,cADLP,aAAa,CAAE,GAAEM,MAAO,QAAX,C;AAAd,QACMC,OADN,qBACiC;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;OAA3BA,O;;;mBAIHR,QAAQ,CAAC;AAAES,QAAAA,OAAO,EAAE;AAAX,OAAD,C;;;;eACFJ,UAAU,CAACK,O;;;;;mBAKjBV,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAEC,OAAR;AAAiBH,QAAAA,OAAO,EAAE;AAA1B,OAAD,C;;;;eACF,K;;;;;;;AAVP;AACF;AACA;;AAIE;AACF;AACA;AAIE,mCAAoB;AAClB,YAAI,CAAC,KAAKI,YAAL,CAAkB,MAAlB,CAAL,EAAgC;AAC9B,eAAKC,YAAL,CAAkB,MAAlB,EAA0B,OAA1B;AACD;;AACD,6BAjBEN,OAiBF;AACD;;;;aAED,iBAAQO,iBAAR,EAA2B;AACzB,YAAIA,iBAAiB,CAACC,GAAlB,CAAsB,MAAtB,CAAJ,EAAmC;AACjC;AACAb,UAAAA,OAAO,CAAC,KAAKc,gBAAL,CAAuB,KAAKC,WAAN,CAAqCC,sBAA3D,CAAD,EAAqFC,IAAI,IAAI;AAClGA,YAAAA,IAAI,CAACN,YAAL,CAAkB,MAAlB,EAA0B,KAAKO,IAA/B;AACD,WAFM,CAAP;AAGD;AACF;;;;aAED,kBAAS;AACP,eAAOtB,IAAP;AACD;AAED;AACF;AACA;;;;;;aACE,kCAAoC;AAClC,eAAQ,GAAEQ,MAAO,qBAAoBA,MAAO,YAA5C;AACD;;;;;;;eAEeD,M;;;;;GAxCIJ,U;;AA2CtB,eAAeM,OAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { html, property, customElement, LitElement } from 'lit-element';\nimport { forEach } from '../../globals/internal/collection-helpers';\nimport { TABLE_COLOR_SCHEME, TABLE_SIZE } from './defs';\nimport styles from './data-table.scss';\n\nexport { TABLE_COLOR_SCHEME, TABLE_SIZE };\n\nconst { prefix } = settings;\n\n/**\n * Data table.\n * @element bx-table\n */\n@customElement(`${prefix}-table`)\nclass BXTable extends LitElement {\n  /**\n   * The table size.\n   */\n  @property({ reflect: true })\n  size = TABLE_SIZE.REGULAR;\n\n  /**\n   * `true` if this table should support sorting.\n   */\n  @property({ type: Boolean, reflect: true })\n  sort = false;\n\n  connectedCallback() {\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'table');\n    }\n    super.connectedCallback();\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('size')) {\n      // Propagate `size` attribute to descendants until `:host-context()` gets supported in all major browsers\n      forEach(this.querySelectorAll((this.constructor as typeof BXTable).selectorRowsWithHeader), elem => {\n        elem.setAttribute('size', this.size);\n      });\n    }\n  }\n\n  render() {\n    return html`<slot></slot>`;\n  }\n\n  /**\n   * The CSS selector to find the rows, including header rows.\n   */\n  static get selectorRowsWithHeader() {\n    return `${prefix}-table-header-row,${prefix}-table-row`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXTable;\n"],"file":"table.js"}