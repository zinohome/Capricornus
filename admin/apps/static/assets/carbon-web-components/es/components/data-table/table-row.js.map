{"version":3,"sources":["components/data-table/table-row.ts"],"names":["settings","html","property","customElement","LitElement","FocusMixin","styles","prefix","BXTableRow","event","selected","target","checked","init","bubbles","cancelable","composed","detail","constructor","dispatchEvent","CustomEvent","eventBeforeChangeSelection","disabled","selectionLabel","selectionName","selectionValue","undefined","_handleClickSelectionCheckbox","type","Boolean","reflect","attribute","hasAttribute","setAttribute","_renderFirstCells"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { html, property, customElement, LitElement } from 'lit-element';\nimport FocusMixin from '../../globals/mixins/focus';\nimport styles from './data-table.scss';\n\nconst { prefix } = settings;\n\n/**\n * Data table row.\n * @element bx-table-row\n * @csspart selection-container The container of the checkbox.\n * @csspart selection The checkbox.\n * @fires bx-table-row-change-selection\n *   The custom event fired before this row is selected/unselected upon a user gesture.\n *   Cancellation of this event stops the user-initiated change in selection.\n */\n@customElement(`${prefix}-table-row`)\nclass BXTableRow extends FocusMixin(LitElement) {\n  /**\n   * Handles `click` event on the check box.\n   * @param event The event.\n   */\n  private _handleClickSelectionCheckbox(event: Event) {\n    const selected = (event.target as HTMLInputElement).checked;\n    const init = {\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n      detail: {\n        selected,\n      },\n    };\n    const constructor = this.constructor as typeof BXTableRow;\n    if (this.dispatchEvent(new CustomEvent(constructor.eventBeforeChangeSelection, init))) {\n      this.selected = selected;\n    }\n  }\n\n  /**\n   * @returns The first set of table cells.\n   */\n  protected _renderFirstCells() {\n    const { disabled, selected, selectionLabel, selectionName, selectionValue } = this;\n    // Using `@click` instead of `@change` to support `.preventDefault()`\n    return !selectionName\n      ? undefined\n      : html`\n          <div part=\"selection-container\" class=\"${prefix}--table-column-checkbox\">\n            ${html`\n              <input\n                id=\"selection\"\n                part=\"selection\"\n                class=\"${prefix}--checkbox\"\n                type=\"checkbox\"\n                value=\"${selectionValue}\"\n                name=\"${selectionName}\"\n                ?disabled=\"${disabled}\"\n                .checked=${selected}\n                @click=${this._handleClickSelectionCheckbox} />\n              <label for=\"selection\" class=\"${prefix}--checkbox-label\" aria-label=\"${selectionLabel}\"></label>\n            `}\n          </div>\n        `;\n  }\n\n  /**\n   * `true` if this table row should be disabled.\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  /**\n   * `true` if this table row is placed at an even position in parent `<bx-table-body>`.\n   * `<bx-table-body>` sets this property, _only_ in zebra stripe mode.\n   * @private\n   */\n  @property({ type: Boolean, reflect: true })\n  even = false;\n\n  /**\n   * `true` if this table row is placed at an odd position in parent `<bx-table-body>`.\n   * `<bx-table-body>` sets this property, _only_ in zebra stripe mode.\n   * @private\n   */\n  @property({ type: Boolean, reflect: true })\n  odd = false;\n\n  /**\n   * `true` if this table row should be selected.\n   */\n  @property({ type: Boolean, reflect: true })\n  selected = false;\n\n  /**\n   * The `aria-label` attribute for the `<label>` for selection.\n   */\n  @property({ attribute: 'selection-label' })\n  selectionLabel = '';\n\n  /**\n   * The `name` attribute for the `<input>` for selection.\n   * If present, this table row will be a selectable one.\n   */\n  @property({ attribute: 'selection-name' })\n  selectionName = '';\n\n  /**\n   * The `value` attribute for the `<input>` for selection.\n   */\n  @property({ attribute: 'selection-value' })\n  selectionValue = '';\n\n  connectedCallback() {\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'row');\n    }\n    super.connectedCallback();\n  }\n\n  render() {\n    return html` ${this._renderFirstCells()}<slot></slot> `;\n  }\n\n  /**\n   * The name of the custom event fired before this row is selected/unselected upon a user gesture.\n   * Cancellation of this event stops the user-initiated change in selection.\n   */\n  static get eventBeforeChangeSelection() {\n    return `${prefix}-table-row-change-selection`;\n  }\n\n  /**\n   * The CSS selector to find the table.\n   */\n  static get selectorTable() {\n    return `${prefix}-table`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXTableRow;\n"],"file":"table-row.js"}