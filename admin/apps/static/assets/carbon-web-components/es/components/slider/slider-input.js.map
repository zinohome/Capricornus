{"version":3,"sources":["components/slider/slider-input.ts"],"names":["classMap","html","property","customElement","LitElement","settings","ifNonNull","FocusMixin","SLIDER_INPUT_COLOR_SCHEME","styles","prefix","BXSliderInput","target","dispatchEvent","CustomEvent","constructor","eventChange","bubbles","composed","detail","value","Number","intermediate","attribute","reflect","REGULAR","type","Boolean","_max","toString","max","oldMax","requestUpdate","_min","min","oldMin","_step","step","oldStep","attachShadow","mode","delegatesFocus","exec","navigator","userAgent","colorScheme","disabled","_handleChange","handleChange","_handleInput","handleInput","classes"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,+BAAzB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,aAAzB,EAAwCC,UAAxC,QAA0D,aAA1D;AACA,OAAOC,QAAP,MAAqB,0CAArB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,yBAAT,QAA0C,QAA1C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASD,yBAAT;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAaL,QAAnB;AAEA;AACA;AACA;AACA;AACA;;IAEMM,a,cADLR,aAAa,CAAE,GAAEO,MAAO,eAAX,C;AAAd,QACMC,aADN,qBACmD;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;OAA7CA,a;;;;;;eAIW,K;;;;;;;;eAKA,G;;;;;;;;eAKC,G;;;;;;;AAbhB;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AACE,6BAAsB;AAAEC,QAAAA;AAAF,OAAtB,EAAyC;AACvC,aAAKC,aAAL,CACE,IAAIC,WAAJ,CAAiB,KAAKC,WAAN,CAA2CC,WAA3D,EAAwE;AACtEC,UAAAA,OAAO,EAAE,IAD6D;AAEtEC,UAAAA,QAAQ,EAAE,IAF4D;AAGtEC,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAEC,MAAM,CAAET,MAAD,CAA6BQ,KAA9B;AADP;AAH8D,SAAxE,CADF;AASD;AAED;AACF;AACA;;;;;aACE,sBAAqB;AAAER,QAAAA;AAAF,OAArB,EAAwC;AACtC,aAAKC,aAAL,CACE,IAAIC,WAAJ,CAAiB,KAAKC,WAAN,CAA2CC,WAA3D,EAAwE;AACtEC,UAAAA,OAAO,EAAE,IAD6D;AAEtEC,UAAAA,QAAQ,EAAE,IAF4D;AAGtEC,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAEC,MAAM,CAAET,MAAD,CAA6BQ,KAA9B,CADP;AAENE,YAAAA,YAAY,EAAE;AAFR;AAH8D,SAAxE,CADF;AAUD;AAED;AACF;AACA;;;;mBACGpB,QAAQ,CAAC;AAAEqB,QAAAA,SAAS,EAAE,cAAb;AAA6BC,QAAAA,OAAO,EAAE;AAAtC,OAAD,C;;;;eACKhB,yBAAyB,CAACiB,O;;;;;mBAKvCvB,QAAQ,CAAC;AAAEwB,QAAAA,IAAI,EAAEC,OAAR;AAAiBH,QAAAA,OAAO,EAAE;AAA1B,OAAD,C;;;;eACE,K;;;;;mBAKVtB,QAAQ,CAAC;AAAEwB,QAAAA,IAAI,EAAEL,MAAR;AAAgBG,QAAAA,OAAO,EAAE;AAAzB,OAAD,C;;;AATT;AACF;AACA;;AAIE;AACF;AACA;AACE,qBACU;AACR,eAAO,KAAKI,IAAL,CAAUC,QAAV,EAAP;AACD;;;;aAED,aAAQT,KAAR,EAAe;AACb,cAAM;AAAEU,UAAAA,GAAG,EAAEC;AAAP,YAAkB,IAAxB;AACA,aAAKH,IAAL,GAAYR,KAAZ;AACA,aAAKY,aAAL,CAAmB,KAAnB,EAA0BD,MAA1B;AACD;AAED;AACF;AACA;;;;mBACG7B,QAAQ,CAAC;AAAEwB,QAAAA,IAAI,EAAEL,MAAR;AAAgBG,QAAAA,OAAO,EAAE;AAAzB,OAAD,C;;aAAT,eACU;AACR,eAAO,KAAKS,IAAL,CAAUJ,QAAV,EAAP;AACD;;;;aAED,aAAQT,KAAR,EAAe;AACb,cAAM;AAAEc,UAAAA,GAAG,EAAEC;AAAP,YAAkB,IAAxB;AACA,aAAKF,IAAL,GAAYb,KAAZ;AACA,aAAKY,aAAL,CAAmB,KAAnB,EAA0BG,MAA1B;AACD;AAED;AACF;AACA;;;;mBACGjC,QAAQ,CAAC;AAAEwB,QAAAA,IAAI,EAAEL,MAAR;AAAgBG,QAAAA,OAAO,EAAE;AAAzB,OAAD,C;;aAAT,gBACW;AACT,eAAO,KAAKY,KAAL,CAAWP,QAAX,EAAP;AACD;;;;aAED,cAAST,KAAT,EAAgB;AACd,cAAM;AAAEiB,UAAAA,IAAI,EAAEC;AAAR,YAAoB,IAA1B;AACA,aAAKF,KAAL,GAAahB,KAAb;AACA,aAAKY,aAAL,CAAmB,MAAnB,EAA2BM,OAA3B;AACD;AAED;AACF;AACA;;;;mBACGpC,QAAQ,E;;;;eACF,Q;;;;;mBAKNA,QAAQ,CAAC;AAAEwB,QAAAA,IAAI,EAAEL;AAAR,OAAD,C;;;;;;;AAHT;AACF;AACA;AAIE,kCAAmB;AAAA;;AACjB,eAAO,KAAKkB,YAAL,CAAkB;AACvBC,UAAAA,IAAI,EAAE,MADiB;AAEvBC,UAAAA,cAAc,EAAEpB,MAAM,CAAC,WAAC,gBAAgBqB,IAAhB,CAAqBC,SAAS,CAACC,SAA/B,CAAD,2CAA8C,CAAC,EAAD,EAAK,CAAL,CAA9C,EAAuD,CAAvD,CAAD,CAAN,IAAqE;AAF9D,SAAlB,CAAP;AAID;;;;aAED,kBAAS;AACP,cAAM;AAAEC,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBhB,UAAAA,GAAzB;AAA8BI,UAAAA,GAA9B;AAAmCG,UAAAA,IAAnC;AAAyCX,UAAAA,IAAzC;AAA+CN,UAAAA,KAA/C;AAAsD2B,UAAAA,aAAa,EAAEC,YAArE;AAAmFC,UAAAA,YAAY,EAAEC;AAAjG,YAAiH,IAAvH,CADO,CAEP;AACA;AACA;AACA;;AACA,cAAMC,OAAO,GAAGnD,QAAQ,CAAC;AACvB,WAAE,GAAEU,MAAO,cAAX,GAA2B,IADJ;AAEvB,WAAE,GAAEA,MAAO,qBAAX,GAAkC,IAFX;AAGvB,WAAE,GAAEA,MAAO,iBAAgBmC,WAAY,EAAvC,GAA2CA;AAHpB,SAAD,CAAxB;AAKA,eAAO5C,IAAP,mJAEiB6C,QAFjB,EAGYxC,SAAS,CAACoB,IAAD,CAHrB,EAIayB,OAJb,EAKWrB,GALX,EAMWI,GANX,EAOYG,IAPZ,EAQcjB,KARd,EASe4B,YATf,EAUcE,WAVd;AAYD;AAED;AACF;AACA;;;;;;aACE,0BAA4B;AAC1B,eAAQ,GAAExC,MAAO,SAAjB;AACD;AAED;AACF;AACA;;;;;;aACE,uBAAyB;AACvB,eAAQ,GAAEA,MAAO,uBAAjB;AACD;;;;;;;eAEeD,M;;;;;GA/JUF,UAAU,CAACH,UAAD,C;;AAkKtC,eAAeO,aAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit-html/directives/class-map';\nimport { html, property, customElement, LitElement } from 'lit-element';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport ifNonNull from '../../globals/directives/if-non-null';\nimport FocusMixin from '../../globals/mixins/focus';\nimport { SLIDER_INPUT_COLOR_SCHEME } from './defs';\nimport styles from './slider.scss';\n\nexport { SLIDER_INPUT_COLOR_SCHEME };\n\nconst { prefix } = settings;\n\n/**\n * The `<input>` box for slider.\n * @element bx-slider-input\n * @fires bx-slider-input-changed - The custom event fired after the value is changed by user gesture.\n */\n@customElement(`${prefix}-slider-input`)\nclass BXSliderInput extends FocusMixin(LitElement) {\n  /**\n   * The internal value of `max` property.\n   */\n  private _max = '100';\n\n  /**\n   * The internal value of `min` property.\n   */\n  private _min = '0';\n\n  /**\n   * The internal value of `step` property.\n   */\n  private _step = '1';\n\n  /**\n   * Handles `change` event to fire a normalized custom event.\n   */\n  private _handleChange({ target }: Event) {\n    this.dispatchEvent(\n      new CustomEvent((this.constructor as typeof BXSliderInput).eventChange, {\n        bubbles: true,\n        composed: true,\n        detail: {\n          value: Number((target as HTMLInputElement).value),\n        },\n      })\n    );\n  }\n\n  /**\n   * Handles `input` event to fire a normalized custom event.\n   */\n  private _handleInput({ target }: Event) {\n    this.dispatchEvent(\n      new CustomEvent((this.constructor as typeof BXSliderInput).eventChange, {\n        bubbles: true,\n        composed: true,\n        detail: {\n          value: Number((target as HTMLInputElement).value),\n          intermediate: true,\n        },\n      })\n    );\n  }\n\n  /**\n   * The color scheme.\n   */\n  @property({ attribute: 'color-scheme', reflect: true })\n  colorScheme = SLIDER_INPUT_COLOR_SCHEME.REGULAR;\n\n  /**\n   * `true` if the check box should be disabled.\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  /**\n   * The maximum value.\n   */\n  @property({ type: Number, reflect: true })\n  get max() {\n    return this._max.toString();\n  }\n\n  set max(value) {\n    const { max: oldMax } = this;\n    this._max = value;\n    this.requestUpdate('max', oldMax);\n  }\n\n  /**\n   * The minimum value.\n   */\n  @property({ type: Number, reflect: true })\n  get min() {\n    return this._min.toString();\n  }\n\n  set min(value) {\n    const { min: oldMin } = this;\n    this._min = value;\n    this.requestUpdate('min', oldMin);\n  }\n\n  /**\n   * The snapping step of the value.\n   */\n  @property({ type: Number, reflect: true })\n  get step() {\n    return this._step.toString();\n  }\n\n  set step(value) {\n    const { step: oldStep } = this;\n    this._step = value;\n    this.requestUpdate('step', oldStep);\n  }\n\n  /**\n   * The type of the `<input>`.\n   */\n  @property()\n  type = 'number';\n\n  /**\n   * The value.\n   */\n  @property({ type: Number })\n  value!: number;\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: 'open',\n      delegatesFocus: Number((/Safari\\/(\\d+)/.exec(navigator.userAgent) ?? ['', 0])[1]) <= 537,\n    });\n  }\n\n  render() {\n    const { colorScheme, disabled, max, min, step, type, value, _handleChange: handleChange, _handleInput: handleInput } = this;\n    // NOTE: Our React variant has an option to add `invalid` option here,\n    // but there doesn't seem a corresponding style to the thumb.\n    // Because of that, in addition to the mininum/maximum constraint enforced,\n    // the code here start without `invalid` styling option for now.\n    const classes = classMap({\n      [`${prefix}--text-input`]: true,\n      [`${prefix}--slider-text-input`]: true,\n      [`${prefix}--text-input--${colorScheme}`]: colorScheme,\n    });\n    return html`\n      <input\n        ?disabled=\"${disabled}\"\n        type=\"${ifNonNull(type)}\"\n        class=\"${classes}\"\n        max=\"${max}\"\n        min=\"${min}\"\n        step=\"${step}\"\n        .value=\"${value}\"\n        @change=\"${handleChange}\"\n        @input=\"${handleInput}\" />\n    `;\n  }\n\n  /**\n   * A selector that will return the parent slider.\n   */\n  static get selectorParent() {\n    return `${prefix}-slider`;\n  }\n\n  /**\n   * The name of the custom event fired after the value is changed by user gesture.\n   */\n  static get eventChange() {\n    return `${prefix}-slider-input-changed`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXSliderInput;\n"],"file":"slider-input.js"}