{"version":3,"sources":["components/tile/selectable-tile.ts"],"names":["settings","classMap","html","svg","property","query","customElement","LitElement","CheckmarkFilled16","ifNonNull","FocusMixin","TILE_COLOR_SCHEME","styles","prefix","BXSelectableTile","selected","_inputNode","checked","attribute","reflect","REGULAR","type","Boolean","attachShadow","mode","delegatesFocus","Number","exec","navigator","userAgent","checkmarkLabel","colorScheme","name","value","_inputType","inputType","_handleChange","handleChange","classes","children","undefined"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { html, svg, property, query, customElement, LitElement } from 'lit-element';\nimport CheckmarkFilled16 from '@carbon/icons/lib/checkmark--filled/16';\nimport ifNonNull from '../../globals/directives/if-non-null';\nimport FocusMixin from '../../globals/mixins/focus';\nimport { TILE_COLOR_SCHEME } from './defs';\nimport styles from './tile.scss';\n\nconst { prefix } = settings;\n\n/**\n * Multi-selectable tile.\n * @element bx-selectable-tile\n */\n@customElement(`${prefix}-selectable-tile`)\nclass BXSelectableTile extends FocusMixin(LitElement) {\n  @query('input')\n  protected _inputNode!: HTMLInputElement;\n\n  /**\n   * The `type` attribute of the `<input>`.\n   */\n  protected _inputType = 'checkbox';\n\n  /**\n   * Handles `change` event on the `<input>` in the shadow DOM.\n   */\n  protected _handleChange() {\n    this.selected = this._inputNode.checked;\n  }\n\n  /**\n   * The a11y text for the checkmark icon of the selected state.\n   */\n  @property({ attribute: 'checkmark-label' })\n  checkmarkLabel!: string;\n\n  /**\n   * The color scheme.\n   */\n  @property({ attribute: 'color-scheme', reflect: true })\n  colorScheme = TILE_COLOR_SCHEME.REGULAR;\n\n  /**\n   * The form name.\n   */\n  @property()\n  name!: string;\n\n  /**\n   * `true` to show the selected state.\n   */\n  @property({ type: Boolean, reflect: true })\n  selected = false;\n\n  /**\n   * The form value.\n   */\n  @property()\n  value!: string;\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: 'open',\n      delegatesFocus: Number((/Safari\\/(\\d+)/.exec(navigator.userAgent) ?? ['', 0])[1]) <= 537,\n    });\n  }\n\n  render() {\n    const { checkmarkLabel, colorScheme, name, selected, value, _inputType: inputType, _handleChange: handleChange } = this;\n    const classes = classMap({\n      [`${prefix}--tile`]: true,\n      [`${prefix}--tile--selectable`]: true,\n      [`${prefix}--tile--${colorScheme}`]: colorScheme,\n    });\n    return html`\n      <input\n        type=\"${inputType}\"\n        id=\"input\"\n        class=\"${prefix}--tile-input\"\n        tabindex=\"-1\"\n        name=\"${ifNonNull(name)}\"\n        value=\"${ifNonNull(value)}\"\n        .checked=${selected}\n        @change=${handleChange} />\n      <label for=\"input\" class=\"${classes}\" tabindex=\"0\">\n        <div class=\"${prefix}--tile__checkmark\">\n          ${CheckmarkFilled16({\n            children: !checkmarkLabel ? undefined : svg`<title>${checkmarkLabel}</title>`,\n          })}\n        </div>\n        <div class=\"${prefix}--tile-content\"><slot></slot></div>\n      </label>\n    `;\n  }\n\n  static styles = styles;\n}\n\nexport default BXSelectableTile;\n"],"file":"selectable-tile.js"}