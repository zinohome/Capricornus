{"version":3,"sources":["components/tile/expandable-tile.ts"],"names":["html","property","customElement","LitElement","ifDefined","ChevronDown16","settings","HostListener","FocusMixin","HostListenerMixin","TILE_COLOR_SCHEME","styles","prefix","BXExpandableTile","event","_belowTheContentHeight","target","assignedNodes","reduce","acc","item","offsetHeight","requestUpdate","expanded","init","bubbles","composed","detail","constructor","beforeChangeEvent","CustomEvent","eventBeforeToggle","cancelable","dispatchEvent","afterChangeEvent","eventToggle","attribute","reflect","REGULAR","type","Boolean","attachShadow","mode","delegatesFocus","Number","exec","navigator","userAgent","belowTheContentHeight","_handleSlotChangeBelowTheFoldContent","handleSlotChangeBelowTheFoldContent","String","id","undefined"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html, property, customElement, LitElement } from 'lit-element';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport ChevronDown16 from '@carbon/icons/lib/chevron--down/16';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport HostListener from '../../globals/decorators/host-listener';\nimport FocusMixin from '../../globals/mixins/focus';\nimport HostListenerMixin from '../../globals/mixins/host-listener';\nimport { TILE_COLOR_SCHEME } from './defs';\nimport styles from './tile.scss';\n\nconst { prefix } = settings;\n\n/**\n * Expandable tile.\n * @element bx-expandable-tile\n * @fires bx-expandable-tile-beingtoggled\n *   The custom event fired before the expanded state is changed upon a user gesture.\n *   Cancellation of this event stops changing the user-initiated change in expanded state.\n * @fires bx-expandable-tile-toggled - The custom event fired after a the expanded state is changed upon a user gesture.\n */\n@customElement(`${prefix}-expandable-tile`)\nclass BXExpandableTile extends HostListenerMixin(FocusMixin(LitElement)) {\n  /**\n   * The computed height of the below-the-fold content.\n   */\n  private _belowTheContentHeight = 0;\n\n  /**\n   * Handles `slotchange` event on the below-the-fold content.\n   * @param event The event.\n   */\n  private _handleSlotChangeBelowTheFoldContent(event: Event) {\n    this._belowTheContentHeight = (event.target as HTMLSlotElement)\n      .assignedNodes()\n      .reduce((acc, item) => acc + ((item as HTMLElement).offsetHeight ?? 0), 0);\n    this.requestUpdate();\n  }\n\n  @HostListener('click')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleClick = () => {\n    const expanded = !this.expanded;\n    const init = {\n      bubbles: true,\n      composed: true,\n      detail: {\n        expanded,\n      },\n    };\n    const constructor = this.constructor as typeof BXExpandableTile;\n    const beforeChangeEvent = new CustomEvent(constructor.eventBeforeToggle, {\n      ...init,\n      cancelable: true,\n    });\n    if (this.dispatchEvent(beforeChangeEvent)) {\n      this.expanded = expanded;\n      const afterChangeEvent = new CustomEvent(constructor.eventToggle, init);\n      this.dispatchEvent(afterChangeEvent);\n    }\n  };\n\n  /**\n   * The color scheme.\n   */\n  @property({ attribute: 'color-scheme', reflect: true })\n  colorScheme = TILE_COLOR_SCHEME.REGULAR;\n\n  /**\n   * `true` to expand this expandable tile.\n   */\n  @property({ type: Boolean, reflect: true })\n  expanded = false;\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: 'open',\n      delegatesFocus: Number((/Safari\\/(\\d+)/.exec(navigator.userAgent) ?? ['', 0])[1]) <= 537,\n    });\n  }\n\n  render() {\n    const {\n      expanded,\n      _belowTheContentHeight: belowTheContentHeight,\n      _handleSlotChangeBelowTheFoldContent: handleSlotChangeBelowTheFoldContent,\n    } = this;\n    return html`\n      <button\n        class=\"${prefix}--tile__chevron\"\n        aria-labelledby=\"above-the-fold-content\"\n        aria-controls=\"below-the-fold-content\"\n        aria-expanded=\"${String(Boolean(expanded))}\">\n        ${ChevronDown16({\n          id: 'icon',\n        })}\n      </button>\n      <div id=\"content\" class=\"${prefix}--tile-content\">\n        <div><slot name=\"above-the-fold-content\"></slot></div>\n        <div\n          class=\"${prefix}-ce--expandable-tile--below-the-fold-content\"\n          style=\"${ifDefined(!expanded ? undefined : `max-height: ${belowTheContentHeight}px`)}\">\n          <slot @slotchange=\"${handleSlotChangeBelowTheFoldContent}\"></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * The name of the custom event fired before the expanded state is changed upon a user gesture.\n   * Cancellation of this event stops changing the user-initiated change in expanded state.\n   */\n  static get eventBeforeToggle() {\n    return `${prefix}-expandable-tile-beingtoggled`;\n  }\n\n  /**\n   * The name of the custom event fired after a the expanded state is changed upon a user gesture.\n   */\n  static get eventToggle() {\n    return `${prefix}-expandable-tile-toggled`;\n  }\n\n  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader\n}\n\nexport default BXExpandableTile;\n"],"file":"expandable-tile.js"}