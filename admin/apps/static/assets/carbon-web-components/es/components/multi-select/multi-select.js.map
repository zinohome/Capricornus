{"version":3,"sources":["components/multi-select/multi-select.ts"],"names":["settings","html","property","query","customElement","Close16","filter","forEach","indexOf","BXDropdown","DROPDOWN_KEYBOARD_ACTION","styles","DROPDOWN_COLOR_SCHEME","DROPDOWN_SIZE","DROPDOWN_TYPE","prefix","BXMultiSelect","type","Boolean","itemToSelect","value","selected","_assistiveStatusText","selectedItemAssistiveText","unselectedItemAssistiveText","querySelectorAll","constructor","selectorItemSelected","item","_handleUserInitiatedToggle","unselectedAllAssistiveText","selectorItem","map","join","event","_selectionButtonNode","contains","target","_handleUserInitiatedSelectItem","filterable","_filterInputNode","focus","_triggerNode","_clearButtonNode","_handleUserInitiatedClearInput","shouldIgnoreClickInner","elem","closest","selectorIgnoreClickInner","composedPath","some","key","action","getAction","TRIGGERING","open","_handleKeypressInnerFlterable","highlightedItem","querySelector","selectorItemHighlighted","clearSelectionLabel","_selectedItemsCount","selectedItemsCount","undefined","triggerContent","_selectedItemContent","selectedItemContent","_handleInput","filterInputNode","length","items","inputValue","toLocaleLowerCase","itemValue","innerText","includes","setAttribute","removeAttribute","requestUpdate","direction","selectorItemResults","highlightedIndex","nextIndex","i","highlighted","selectorItemFiltered","attribute","changedProperties","has","size","values","split"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { html, property, query, customElement, TemplateResult } from 'lit-element';\nimport Close16 from '@carbon/icons/lib/close/16';\nimport { filter, forEach, indexOf } from '../../globals/internal/collection-helpers';\nimport BXDropdown, { DROPDOWN_KEYBOARD_ACTION } from '../dropdown/dropdown';\nimport BXMultiSelectItem from './multi-select-item';\nimport styles from './multi-select.scss';\n\nexport { DROPDOWN_COLOR_SCHEME, DROPDOWN_SIZE, DROPDOWN_TYPE } from '../dropdown/dropdown';\n\nconst { prefix } = settings;\n\n/**\n * Multi select.\n * @element bx-multi-select\n * @fires bx-multi-select-beingselected\n *   The custom event fired before a multi select item is selected upon a user gesture.\n *   Cancellation of this event stops changing the user-initiated selection.\n * @fires bx-multi-select-selected - The custom event fired after a multi select item is selected upon a user gesture.\n * @fires bx-multi-select-beingtoggled\n *   The custom event fired before the open state of this multi select is toggled upon a user gesture.\n *   Cancellation of this event stops the user-initiated toggling.\n * @fires bx-multi-select-toggled\n *   The custom event fired after the open state of this multi select is toggled upon a user gesture.\n */\n@customElement(`${prefix}-multi-select`)\nclass BXMultiSelect extends BXDropdown {\n  @property({ type: Boolean })\n  filterable;\n\n  /**\n   * The count of selected items.\n   */\n  private _selectedItemsCount = 0;\n\n  /**\n   * The clear button.\n   */\n  @query('#clear-button')\n  private _clearButtonNode!: HTMLElement;\n\n  /**\n   * The selection button.\n   */\n  @query('#selection-button')\n  private _selectionButtonNode!: HTMLElement;\n\n  /**\n   * The `<input>` for filtering.\n   */\n  @query('input')\n  private _filterInputNode!: HTMLInputElement;\n\n  /**\n   * The trigger button.\n   */\n  @query(`.${prefix}--list-box__field`)\n  private _triggerNode!: HTMLElement;\n\n  protected _selectionShouldChange(itemToSelect?: BXMultiSelectItem) {\n    // If we are selecting an item, assumes we always toggle\n    return Boolean(this.value || itemToSelect);\n  }\n\n  protected _selectionDidChange(itemToSelect?: BXMultiSelectItem) {\n    if (itemToSelect) {\n      itemToSelect.selected = !itemToSelect.selected;\n      this._assistiveStatusText = itemToSelect.selected ? this.selectedItemAssistiveText : this.unselectedItemAssistiveText;\n    } else {\n      forEach(this.querySelectorAll((this.constructor as typeof BXMultiSelect).selectorItemSelected), item => {\n        (item as BXMultiSelectItem).selected = false;\n      });\n      this._handleUserInitiatedToggle(false);\n      this._assistiveStatusText = this.unselectedAllAssistiveText;\n    }\n    // Change in `.selected` hasn't been reflected to the corresponding attribute yet\n    this.value = filter(\n      this.querySelectorAll((this.constructor as typeof BXMultiSelect).selectorItem),\n      item => (item as BXMultiSelectItem).selected\n    )\n      .map(item => (item as BXMultiSelectItem).value)\n      .join(',');\n  }\n\n  protected _handleClickInner(event: MouseEvent) {\n    if (this._selectionButtonNode?.contains(event.target as Node)) {\n      this._handleUserInitiatedSelectItem();\n      if (this.filterable) {\n        this._filterInputNode.focus();\n      } else {\n        this._triggerNode.focus();\n      }\n    } else if (this._clearButtonNode?.contains(event.target as Node)) {\n      this._handleUserInitiatedClearInput();\n    } else {\n      const shouldIgnoreClickInner = elem =>\n        elem.closest && elem.closest((this.constructor as typeof BXMultiSelect).selectorIgnoreClickInner);\n      if (!event.composedPath().some(shouldIgnoreClickInner)) {\n        super._handleClickInner(event);\n      }\n      if (this.filterable) this._filterInputNode.focus();\n    }\n  }\n\n  /**\n   * Handler for the `keypress` event, ensures filter still works upon entering space\n   */\n  protected _handleKeypressInner(event: KeyboardEvent) {\n    const { key } = event;\n    const action = (this.constructor as typeof BXDropdown).getAction(key);\n    const { TRIGGERING } = DROPDOWN_KEYBOARD_ACTION;\n\n    if (\n      this._clearButtonNode?.contains(event.target as Node) &&\n      // Space key should be handled by `<input>` unless \"clear selection\" button has focus\n      (action === TRIGGERING || key === ' ')\n    ) {\n      this._handleUserInitiatedClearInput();\n    } else if (this._selectionButtonNode?.contains(event.target as Node)) {\n      this._handleUserInitiatedSelectItem();\n      this.open = true;\n      if (this.filterable) {\n        this._filterInputNode.focus();\n      } else {\n        this._triggerNode.focus();\n      }\n    } else if (this.filterable) {\n      this._handleKeypressInnerFlterable(event);\n    } else {\n      super._handleKeypressInner(event);\n    }\n  }\n\n  /**\n   * Special andler for the `keypress` event, ensures space selection for filterable\n   * variation is disabled\n   */\n\n  protected _handleKeypressInnerFlterable(event: KeyboardEvent) {\n    const { key } = event;\n    const action = (this.constructor as typeof BXDropdown).getAction(key);\n    if (!this.open) {\n      switch (action) {\n        case DROPDOWN_KEYBOARD_ACTION.TRIGGERING:\n          this._handleUserInitiatedToggle(true);\n          break;\n        default:\n          break;\n      }\n    } else {\n      switch (key) {\n        case 'Enter':\n          {\n            const constructor = this.constructor as typeof BXDropdown;\n            const highlightedItem = this.querySelector(constructor.selectorItemHighlighted) as BXMultiSelectItem;\n            if (highlightedItem) {\n              this._handleUserInitiatedSelectItem(highlightedItem);\n            } else {\n              this._handleUserInitiatedToggle(false);\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  protected _renderPrecedingTriggerContent() {\n    const { clearSelectionLabel, _selectedItemsCount: selectedItemsCount } = this;\n    return selectedItemsCount === 0\n      ? undefined\n      : html`\n          <div\n            id=\"selection-button\"\n            role=\"button\"\n            class=\"${prefix}--list-box__selection ${prefix}--list-box__selection--multi ${prefix}--tag--filter\"\n            tabindex=\"0\"\n            title=\"${clearSelectionLabel}\">\n            ${selectedItemsCount} ${Close16({ 'aria-label': clearSelectionLabel })}\n          </div>\n        `;\n  }\n\n  /**\n    @returns The main content of the trigger button.\n   */\n  protected _renderTriggerContent(): TemplateResult {\n    const { triggerContent, _selectedItemContent: selectedItemContent } = this;\n    return !this.filterable\n      ? html` <span id=\"trigger-label\" class=\"${prefix}--list-box__label\">${selectedItemContent || triggerContent}</span> `\n      : html`\n          <input\n            id=\"trigger-label\"\n            class=\"${prefix}--text-input\"\n            placeholder=\"${triggerContent}\"\n            role=\"combobox\"\n            aria-controls=\"menu-body\"\n            aria-autocomplete=\"list\"\n            @input=\"${this._handleInput}\" />\n        `;\n  }\n\n  protected _renderFollowingTriggerContent(): TemplateResult | void {\n    const { clearSelectionLabel, _filterInputNode: filterInputNode } = this;\n    return filterInputNode && filterInputNode.value.length > 0 && this.filterable\n      ? html`\n          <div id=\"clear-button\" role=\"button\" class=\"${prefix}--list-box__selection\" tabindex=\"0\" title=\"${clearSelectionLabel}\">\n            ${Close16({ 'aria-label': clearSelectionLabel })}\n          </div>\n        `\n      : undefined;\n  }\n\n  /**\n   * Handles `input` event on the `<input>` for filtering.\n   */\n  protected _handleInput() {\n    const items = this.querySelectorAll((this.constructor as typeof BXMultiSelect).selectorItem);\n    const inputValue = this._filterInputNode.value.toLocaleLowerCase();\n\n    if (!this.open) this.open = true;\n\n    forEach(items, item => {\n      const itemValue = (item as HTMLElement).innerText.toLocaleLowerCase();\n\n      if (!itemValue.includes(inputValue)) {\n        (item as BXMultiSelectItem).setAttribute('filtered', '');\n        (item as BXMultiSelectItem).removeAttribute('highlighted');\n      } else {\n        (item as BXMultiSelectItem).removeAttribute('filtered');\n      }\n    });\n\n    this.requestUpdate();\n  }\n\n  /**\n   * Navigate through dropdown items.\n   * @param direction `-1` to navigate backward, `1` to navigate forward.\n   */\n  protected _navigate(direction: number) {\n    if (!this.filterable) {\n      this._triggerNode.focus();\n      super._navigate(direction);\n    } else {\n      // only navigate through remaining item\n      const constructor = this.constructor as typeof BXMultiSelect;\n      const items = this.querySelectorAll(constructor.selectorItemResults);\n      const highlightedItem = this.querySelector(constructor.selectorItemHighlighted);\n      const highlightedIndex = indexOf(items, highlightedItem!);\n\n      let nextIndex = highlightedIndex + direction;\n      if (nextIndex < 0) {\n        nextIndex = items.length - 1;\n      }\n      if (nextIndex >= items.length) {\n        nextIndex = 0;\n      }\n      forEach(items, (item, i) => {\n        (item as BXMultiSelectItem).highlighted = i === nextIndex;\n      });\n    }\n  }\n\n  /**\n   * Handles user-initiated clearing the `<input>` for filtering.\n   */\n  protected _handleUserInitiatedClearInput() {\n    const constructor = this.constructor as typeof BXMultiSelect;\n    const items = this.querySelectorAll(constructor.selectorItemFiltered);\n    this._filterInputNode.value = '';\n    this.open = true;\n    this._filterInputNode.focus();\n    forEach(items, item => {\n      (item as BXMultiSelectItem).removeAttribute('filtered');\n    });\n  }\n\n  /**\n   * The `aria-label` attribute for the icon to clear selection.\n   */\n  @property({ attribute: 'clear-selection-label' })\n  clearSelectionLabel = '';\n\n  /**\n   * An assistive text for screen reader to announce, telling that an item is unselected.\n   */\n  @property({ attribute: 'unselected-item-assistive-text' })\n  unselectedItemAssistiveText = 'Unselected an item.';\n\n  /**\n   * An assistive text for screen reader to announce, telling that all items are unselected.\n   */\n  @property({ attribute: 'unselected-all-assistive-text' })\n  unselectedAllAssistiveText = 'Unselected all items.';\n\n  shouldUpdate(changedProperties) {\n    const { selectorItem } = this.constructor as typeof BXMultiSelect;\n    if (changedProperties.has('size')) {\n      forEach(this.querySelectorAll(selectorItem), elem => {\n        (elem as BXMultiSelectItem).size = this.size;\n      });\n    }\n    if (changedProperties.has('value')) {\n      const { value } = this;\n      const values = !value ? [] : value.split(',');\n      // Updates selection beforehand because our rendering logic for `<bx-multi-select>` looks for selected items via `qSA()`\n      const items = this.querySelectorAll(selectorItem);\n      forEach(items, elem => {\n        (elem as BXMultiSelectItem).selected = values.indexOf((elem as BXMultiSelectItem).value) >= 0;\n      });\n      this._selectedItemsCount = filter(items, elem => values.indexOf((elem as BXMultiSelectItem).value) >= 0).length;\n    }\n    return true;\n  }\n\n  /**\n   * A selector to ignore the `click` events from.\n   * Primary for the checkbox label where the `click` event will happen from the associated check box.\n   */\n  private static get selectorIgnoreClickInner() {\n    return `.${prefix}--checkbox-label`;\n  }\n\n  /**\n   * A selector that will return highlighted items.\n   */\n  static get selectorItemHighlighted() {\n    return `${prefix}-multi-select-item[highlighted]`;\n  }\n\n  /**\n   * A selector that will return multi select items.\n   * We use a separate property from `.itemTagName` due to the nature in difference of tag name vs. selector.\n   */\n  static get selectorItem() {\n    return `${prefix}-multi-select-item`;\n  }\n\n  /**\n   * A selector that will return remaining items after a filter.\n   */\n  static get selectorItemFiltered() {\n    return `${prefix}-multi-select-item[filtered]`;\n  }\n\n  /**\n   * A selector that will return remaining items after a filter.\n   */\n  static get selectorItemResults() {\n    return `${prefix}-multi-select-item:not([filtered])`;\n  }\n\n  /**\n   * A selector that will return selected items.\n   */\n  static get selectorItemSelected() {\n    return `${prefix}-multi-select-item[selected]`;\n  }\n\n  /**\n   * The name of the custom event fired before this multi select item is being toggled upon a user gesture.\n   * Cancellation of this event stops the user-initiated action of toggling this multi select item.\n   */\n  static get eventBeforeToggle() {\n    return `${prefix}-multi-select-beingtoggled`;\n  }\n\n  /**\n   * The name of the custom event fired after this multi select item is toggled upon a user gesture.\n   */\n  static get eventToggle() {\n    return `${prefix}-multi-select-toggled`;\n  }\n\n  /**\n   * The name of the custom event fired before a multi select item is selected upon a user gesture.\n   * Cancellation of this event stops changing the user-initiated selection.\n   */\n  static get eventBeforeSelect() {\n    return `${prefix}-multi-select-beingselected`;\n  }\n\n  /**\n   * The name of the custom event fired after a a multi select item is selected upon a user gesture.\n   */\n  static get eventSelect() {\n    return `${prefix}-multi-select-selected`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXMultiSelect;\n"],"file":"multi-select.js"}