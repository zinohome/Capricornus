{"version":3,"sources":["components/multi-select/multi-select-item.ts"],"names":["settings","ifDefined","html","property","customElement","BXDropdownItem","styles","prefix","BXMultiSelectItem","type","Boolean","attribute","disabled","selected","selectionName","value","undefined"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,0CAArB;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,aAAzB,QAA8C,aAA9C;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaP,QAAnB;AAEA;AACA;AACA;AACA;;IAEMQ,iB,cADLJ,aAAa,CAAE,GAAEG,MAAO,oBAAX,C;AAAd,QACMC,iBADN,yBAC+C;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;OAAzCA,iB;;;mBAIHL,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEC;AAAR,OAAD,C;;;;;mBAMRP,QAAQ,CAAC;AAAEQ,QAAAA,SAAS,EAAE;AAAb,OAAD,C;;;;eACO,E;;;;;;;AAVhB;AACF;AACA;;AAIE;AACF;AACA;AAIE,wBAAS;AACP,cAAM;AAAEC,UAAAA,QAAF;AAAYC,UAAAA,QAAZ;AAAsBC,UAAAA,aAAtB;AAAqCC,UAAAA;AAArC,YAA+C,IAArD;AACA,eAAOb,IAAP,oZACgBK,MADhB,EAEkBA,MAFlB,EAEuCA,MAFvC,EAMiBA,MANjB,EASoBK,QATpB,EAUmBC,QAVnB,EAWgBZ,SAAS,CAACa,aAAa,IAAIE,SAAlB,CAXzB,EAYiBD,KAZjB,EAakCR,MAblC,EAcuBA,MAdvB;AAmBD;AAED;AACF;AACA;;;;;;aACE,wBAA0B;AACxB,eAAQ,GAAEA,MAAO,eAAjB;AACD;;;;;;;eAEeD,M;;;;;GA3CcD,c;;AA8ChC,eAAeG,iBAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport { html, property, customElement } from 'lit-element';\nimport BXDropdownItem from '../dropdown/dropdown-item';\nimport styles from './multi-select.scss';\n\nconst { prefix } = settings;\n\n/**\n * Multi select item.\n * @element bx-multi-select-item\n */\n@customElement(`${prefix}-multi-select-item`)\nclass BXMultiSelectItem extends BXDropdownItem {\n  /**\n   * The property to hide when item is filtered from input\n   */\n  @property({ type: Boolean })\n  filtered;\n\n  /**\n   * The `name` attribute for the `<input>` for selection.\n   */\n  @property({ attribute: 'selection-name' })\n  selectionName = '';\n\n  render() {\n    const { disabled, selected, selectionName, value } = this;\n    return html`\n      <div class=\"${prefix}--list-box__menu-item__option\">\n        <div class=\"${prefix}--form-item ${prefix}--checkbox-wrapper\">\n          <input\n            id=\"input\"\n            type=\"checkbox\"\n            class=\"${prefix}--checkbox\"\n            tabindex=\"-1\"\n            readonly\n            ?disabled=${disabled}\n            .checked=${selected}\n            name=\"${ifDefined(selectionName || undefined)}\"\n            value=\"${value}\" />\n          <label for=\"input\" class=\"${prefix}--checkbox-label\">\n            <span class=\"${prefix}--checkbox-label-text\"><slot></slot></span>\n          </label>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * A selector that will return multi select.\n   */\n  static get selectorList() {\n    return `${prefix}-multi-select`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXMultiSelectItem;\n"],"file":"multi-select-item.js"}