{"version":3,"sources":["components/tooltip/tooltip.ts"],"names":["settings","html","property","query","customElement","LitElement","Information16","HostListener","HostListenerMixin","find","styles","prefix","BXTooltip","open","updateComplete","_menuBody","menuBody","focus","event","key","_handleClick","type","Boolean","reflect","_triggerNode","triggerNode","TypeError","getBoundingClientRect","hasAttribute","setAttribute","shadowRoot","attachShadow","mode","changedProperties","has","childNodes","elem","constructor","FLOATING_MENU","String","id"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,0CAArB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,KAAzB,EAAgCC,aAAhC,EAA+CC,UAA/C,QAAiE,aAAjE;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,SAASC,IAAT,QAAqB,2CAArB;AAGA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaX,QAAnB;AAEA;AACA;AACA;AACA;;IAEMY,S,cADLR,aAAa,CAAE,GAAEO,MAAO,UAAX,C;AAAd,QACMC,SADN,4BACuF;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;OAAjFA,S;;;;;;eAIuC,I;;;;;mBAK1CT,KAAK,CAAC,UAAD,C;;;;;mBAMLI,YAAY,CAAC,OAAD,C;;;;eAEU,YAAY;AACjC,eAAKM,IAAL,GAAY,CAAC,KAAKA,IAAlB;AACA,gBAAM;AAAEA,YAAAA,IAAF;AAAQC,YAAAA;AAAR,cAA2B,IAAjC;;AACA,cAAID,IAAJ,EAAU;AACR,kBAAMC,cAAN;AACA,kBAAM;AAAEC,cAAAA,SAAS,EAAEC;AAAb,gBAA0B,IAAhC;AACAA,YAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEC,KAAV;AACD;AACF,S;;;;;mBAKAV,YAAY,CAAC,SAAD,C;;;;eAEY,MAAMW,KAAN,IAAe;AACtC,cAAIA,KAAK,CAACC,GAAN,KAAc,GAAd,IAAqBD,KAAK,CAACC,GAAN,KAAc,OAAvC,EAAgD;AAC9C,iBAAKC,YAAL;AACD;AACF,S;;;;;mBAKAlB,QAAQ,CAAC;AAAEmB,QAAAA,IAAI,EAAEC,OAAR;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAD,C;;;;eACF,K;;;;;;;AAzCP;AACF;AACA;;AAGE;AACF;AACA;;AAIE;AACF;AACA;;AAaE;AACF;AACA;;AASE;AACF;AACA;;AAIE;AACF;AACA;AACE,iCAAsB;AACpB,cAAM;AAAEC,UAAAA,YAAY,EAAEC;AAAhB,YAAgC,IAAtC;;AACA,YAAI,CAACA,WAAL,EAAkB;AAChB,gBAAM,IAAIC,SAAJ,CAAc,iCAAd,CAAN;AACD;;AACD,eAAOD,WAAW,CAACE,qBAAZ,EAAP;AACD;;;;aAED,6BAAoB;AAClB,YAAI,CAAC,KAAKC,YAAL,CAAkB,MAAlB,CAAL,EAAgC;AAC9B,eAAKC,YAAL,CAAkB,MAAlB,EAA0B,QAA1B;AACD;;AACD,YAAI,CAAC,KAAKD,YAAL,CAAkB,UAAlB,CAAL,EAAoC;AAClC;AACA,eAAKC,YAAL,CAAkB,UAAlB,EAA8B,GAA9B;AACD;;AACD,YAAI,CAAC,KAAKD,YAAL,CAAkB,eAAlB,CAAL,EAAyC;AACvC,eAAKC,YAAL,CAAkB,eAAlB,EAAmC,MAAnC;AACD;;AACD,YAAI,CAAC,KAAKD,YAAL,CAAkB,eAAlB,CAAL,EAAyC;AACvC,eAAKC,YAAL,CAAkB,eAAlB,EAAmC,OAAnC;AACD;;AACD,YAAI,CAAC,KAAKC,UAAV,EAAsB;AACpB,eAAKC,YAAL,CAAkB;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAAlB;AACD;;AACD,6BAxEEpB,SAwEF;AACD;;;;aAED,iBAAQqB,iBAAR,EAA2B;AACzB,YAAIA,iBAAiB,CAACC,GAAlB,CAAsB,MAAtB,CAAJ,EAAmC;AACjC,cAAI,CAAC,KAAKnB,SAAV,EAAqB;AACnB,iBAAKA,SAAL,GAAiBN,IAAI,CAAC,KAAK0B,UAAN,EAAkBC,IAAI,IAAKA,IAAI,CAACC,WAAN,CAA4CC,aAAtE,CAArB;AACD;;AACD,cAAI,KAAKvB,SAAT,EAAoB;AAClB,iBAAKA,SAAL,CAAeF,IAAf,GAAsB,KAAKA,IAA3B;AACD;;AACD,eAAKgB,YAAL,CAAkB,eAAlB,EAAmCU,MAAM,CAACjB,OAAO,CAAC,KAAKT,IAAN,CAAR,CAAzC;AACD;AACF;;;;aAED,kBAAS;AACP,eAAOZ,IAAP,uCACIK,aAAa,CAAC;AAAEkC,UAAAA,EAAE,EAAE;AAAN,SAAD,CADjB;AAID;;;;;;;eAEe9B,M;;;;;GA9FMF,iBAAiB,CAACH,UAAD,C;;AAiGzC,eAAeO,SAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { html, property, query, customElement, LitElement } from 'lit-element';\nimport Information16 from '@carbon/icons/lib/information/16';\nimport HostListener from '../../globals/decorators/host-listener';\nimport HostListenerMixin from '../../globals/mixins/host-listener';\nimport { find } from '../../globals/internal/collection-helpers';\nimport BXFloatingMenu from '../floating-menu/floating-menu';\nimport BXFloatingMenuTrigger from '../floating-menu/floating-menu-trigger';\nimport styles from './tooltip.scss';\n\nconst { prefix } = settings;\n\n/**\n * Trigger button of tooltip.\n * @element bx-tooltip\n */\n@customElement(`${prefix}-tooltip`)\nclass BXTooltip extends HostListenerMixin(LitElement) implements BXFloatingMenuTrigger {\n  /**\n   * The menu body.\n   */\n  private _menuBody: BXFloatingMenu | null = null;\n\n  /**\n   * The trigger button.\n   */\n  @query('#trigger')\n  private _triggerNode!: HTMLElement;\n\n  /**\n   * Handles `click` event on this element.\n   */\n  @HostListener('click')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleClick = async () => {\n    this.open = !this.open;\n    const { open, updateComplete } = this;\n    if (open) {\n      await updateComplete;\n      const { _menuBody: menuBody } = this;\n      menuBody?.focus();\n    }\n  };\n\n  /**\n   * Handles `keydown` event on this element.\n   */\n  @HostListener('keydown')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleKeydown = async event => {\n    if (event.key === ' ' || event.key === 'Enter') {\n      this._handleClick();\n    }\n  };\n\n  /**\n   * `true` if the dropdown should be open.\n   */\n  @property({ type: Boolean, reflect: true })\n  open = false;\n\n  /**\n   * @returns The position of the trigger button in the viewport.\n   */\n  get triggerPosition() {\n    const { _triggerNode: triggerNode } = this;\n    if (!triggerNode) {\n      throw new TypeError('Cannot find the trigger button.');\n    }\n    return triggerNode.getBoundingClientRect();\n  }\n\n  connectedCallback() {\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'button');\n    }\n    if (!this.hasAttribute('tabindex')) {\n      // TODO: Should we use a property?\n      this.setAttribute('tabindex', '0');\n    }\n    if (!this.hasAttribute('aria-haspopup')) {\n      this.setAttribute('aria-haspopup', 'true');\n    }\n    if (!this.hasAttribute('aria-expanded')) {\n      this.setAttribute('aria-expanded', 'false');\n    }\n    if (!this.shadowRoot) {\n      this.attachShadow({ mode: 'open' });\n    }\n    super.connectedCallback();\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('open')) {\n      if (!this._menuBody) {\n        this._menuBody = find(this.childNodes, elem => (elem.constructor as typeof BXFloatingMenu).FLOATING_MENU);\n      }\n      if (this._menuBody) {\n        this._menuBody.open = this.open;\n      }\n      this.setAttribute('aria-expanded', String(Boolean(this.open)));\n    }\n  }\n\n  render() {\n    return html`\n      ${Information16({ id: 'trigger' })}\n      <slot></slot>\n    `;\n  }\n\n  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader\n}\n\nexport default BXTooltip;\n"],"file":"tooltip.js"}