{"version":3,"sources":["components/inline-loading/inline-loading.ts"],"names":["html","property","customElement","LitElement","classMap","CheckmarkFilled16","ErrorFilled16","settings","LOADING_TYPE","getLoadingIcon","INLINE_LOADING_STATE","styles","prefix","BXInlineLoading","status","ERROR","class","FINISHED","INACTIVE","ACTIVE","classes","type","SMALL","undefined","reflect","hasAttribute","setAttribute","statusIconResult","_renderIcon","statusIconWrapperResult"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAT,EAAeC,QAAf,EAAyBC,aAAzB,EAAwCC,UAAxC,QAA0D,aAA1D;AACA,SAASC,QAAT,QAAyB,+BAAzB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,QAAP,MAAqB,0CAArB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AAEA,SAASD,oBAAT;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAaL,QAAnB;AAEA;AACA;AACA;AACA;;IAEMM,e,cADLX,aAAa,CAAE,GAAEU,MAAO,iBAAX,C;AAAd,QACMC,eADN,qBACyC;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;OAAnCA,e;;;;;AACJ;AACF;AACA;AACE,6BAAsB;AACpB,cAAM;AAAEC,UAAAA;AAAF,YAAa,IAAnB;;AACA,YAAIA,MAAM,KAAKJ,oBAAoB,CAACK,KAApC,EAA2C;AACzC,iBAAOT,aAAa,CAAC;AACnBU,YAAAA,KAAK,EAAG,GAAEJ,MAAO;AADE,WAAD,CAApB;AAGD;;AACD,YAAIE,MAAM,KAAKJ,oBAAoB,CAACO,QAApC,EAA8C;AAC5C,iBAAOZ,iBAAiB,CAAC;AACvBW,YAAAA,KAAK,EAAG,GAAEJ,MAAO,yCAAwCA,MAAO;AADzC,WAAD,CAAxB;AAGD;;AACD,YAAIE,MAAM,KAAKJ,oBAAoB,CAACQ,QAAhC,IAA4CJ,MAAM,KAAKJ,oBAAoB,CAACS,MAAhF,EAAwF;AACtF,gBAAMC,OAAO,GAAGhB,QAAQ,CAAC;AACvB,aAAE,GAAEQ,MAAO,WAAX,GAAwB,IADD;AAEvB,aAAE,GAAEA,MAAO,kBAAX,GAA+B,IAFR;AAGvB,aAAE,GAAEA,MAAO,iBAAX,GAA8BE,MAAM,KAAKJ,oBAAoB,CAACQ;AAHvC,WAAD,CAAxB;AAKA,iBAAOlB,IAAP,iDAA2BoB,OAA3B,EAAuCX,cAAc,CAAC;AAAEY,YAAAA,IAAI,EAAEb,YAAY,CAACc;AAArB,WAAD,CAArD;AACD;;AACD,eAAOC,SAAP;AACD;AAED;AACF;AACA;;;;mBACGtB,QAAQ,CAAC;AAAEuB,QAAAA,OAAO,EAAE;AAAX,OAAD,C;;;;eACAd,oBAAoB,CAACS,M;;;;;;aAE9B,6BAAoB;AAClB,YAAI,CAAC,KAAKM,YAAL,CAAkB,WAAlB,CAAL,EAAqC;AACnC,eAAKC,YAAL,CAAkB,WAAlB,EAA+B,WAA/B;AACD;;AACD,6BArCEb,eAqCF;AACD;;;;aAED,kBAAS;AACP,cAAMc,gBAAgB,GAAG,KAAKC,WAAL,EAAzB;;AACA,cAAMC,uBAAuB,GAAG,CAACF,gBAAD,GAC5BJ,SAD4B,GAE5BvB,IAF4B,8EAERY,MAFQ,EAE8Be,gBAF9B,CAAhC;AAGA,eAAO3B,IAAP,mFACI6B,uBADJ,EAEcjB,MAFd;AAID;;;;;;;eAEeD,M;;;;;GAnDYR,U;;AAsD9B,eAAeU,eAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html, property, customElement, LitElement } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport CheckmarkFilled16 from '@carbon/icons/lib/checkmark--filled/16';\nimport ErrorFilled16 from '@carbon/icons/lib/error--filled/16';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport LOADING_TYPE from '../loading/types';\nimport getLoadingIcon from '../loading/loading-icon';\nimport { INLINE_LOADING_STATE } from './defs';\nimport styles from './inline-loading.scss';\n\nexport { INLINE_LOADING_STATE };\n\nconst { prefix } = settings;\n\n/**\n * Lnline loading spinner.\n * @element bx-inline-loading\n */\n@customElement(`${prefix}-inline-loading`)\nclass BXInlineLoading extends LitElement {\n  /**\n   * @returns The template for the status icon.\n   */\n  private _renderIcon() {\n    const { status } = this;\n    if (status === INLINE_LOADING_STATE.ERROR) {\n      return ErrorFilled16({\n        class: `${prefix}--inline-loading--error`,\n      });\n    }\n    if (status === INLINE_LOADING_STATE.FINISHED) {\n      return CheckmarkFilled16({\n        class: `${prefix}--inline-loading__checkmark-container ${prefix}--inline-loading__svg`,\n      });\n    }\n    if (status === INLINE_LOADING_STATE.INACTIVE || status === INLINE_LOADING_STATE.ACTIVE) {\n      const classes = classMap({\n        [`${prefix}--loading`]: true,\n        [`${prefix}--loading--small`]: true,\n        [`${prefix}--loading--stop`]: status === INLINE_LOADING_STATE.INACTIVE,\n      });\n      return html` <div class=\"${classes}\">${getLoadingIcon({ type: LOADING_TYPE.SMALL })}</div> `;\n    }\n    return undefined;\n  }\n\n  /**\n   * The loading status.\n   */\n  @property({ reflect: true })\n  status = INLINE_LOADING_STATE.ACTIVE;\n\n  connectedCallback() {\n    if (!this.hasAttribute('aria-live')) {\n      this.setAttribute('aria-live', 'assertive');\n    }\n    super.connectedCallback();\n  }\n\n  render() {\n    const statusIconResult = this._renderIcon();\n    const statusIconWrapperResult = !statusIconResult\n      ? undefined\n      : html` <div class=\"${prefix}--inline-loading__animation\">${statusIconResult}</div> `;\n    return html`\n      ${statusIconWrapperResult}\n      <p class=\"${prefix}--inline-loading__text\"><slot></slot></p>\n    `;\n  }\n\n  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader\n}\n\nexport default BXInlineLoading;\n"],"file":"inline-loading.js"}