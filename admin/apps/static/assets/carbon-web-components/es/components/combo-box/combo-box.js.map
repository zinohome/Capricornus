{"version":3,"sources":["components/combo-box/combo-box.ts"],"names":["settings","html","property","query","customElement","Close16","findIndex","forEach","BXDropdown","DROPDOWN_KEYBOARD_ACTION","styles","DROPDOWN_COLOR_SCHEME","DROPDOWN_SIZE","DROPDOWN_TYPE","prefix","BXComboBox","item","itemMatches","_defaultItemMatches","_filterInputNode","value","queryText","textContent","toLowerCase","indexOf","items","querySelectorAll","constructor","selectorItem","index","_testItemWithQueryText","i","menuRect","_itemMenu","getBoundingClientRect","itemRect","isViewable","top","bottom","clientHeight","scrollTop","scrollBot","Math","abs","highlighted","filterInput","_filterInputValue","open","requestUpdate","event","_selectionButtonNode","contains","target","_handleUserInitiatedClearInput","key","action","getAction","TRIGGERING","focus","_handleUserInitiatedSelectItem","_selectionShouldChange","itemToSelect","selectorItemSelected","selected","_assistiveStatusText","selectedItemAssistiveText","_handleUserInitiatedToggle","disabled","inputLabel","triggerContent","filterInputValue","_handleInput","handleInput","clearSelectionLabel","length","undefined","attribute","changedProperties","_selectedItemContent","selectedItemContent","has","_listBoxNode","listBoxNode","classList","add","Set"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,0CAArB;AAEA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,KAAzB,EAAgCC,aAAhC,QAAqD,aAArD;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,2CAAnC;AACA,OAAOC,UAAP,IAAqBC,wBAArB,QAAqD,sBAArD;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,qBAAT,EAAgCC,aAAhC,EAA+CC,aAA/C,QAAoE,sBAApE;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAad,QAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMe,U,cADLX,aAAa,CAAE,GAAEU,MAAO,YAAX,C;AAAd,QACMC,UADN,qBACoC;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;OAA9BA,U;;;;;;eAI0B,E;;;;;;;;eAEQ,K;;;;;mBAKrCZ,KAAK,CAAC,OAAD,C;;;;;mBAMLA,KAAK,CAAC,YAAD,C;;;;;mBAMLA,KAAK,CAAC,mBAAD,C;;;;;;;AAtBN;AACF;AACA;;AAKE;AACF;AACA;;AAIE;AACF;AACA;;AAIE;AACF;AACA;;AAIE;AACF;AACA;AACA;AACE,sCAAiCa,IAAjC,EAAuC;AACrC,eAAO,CAAC,KAAKC,WAAL,IAAoB,KAAKC,mBAA1B,EAA+CF,IAA/C,EAAqD,KAAKG,gBAAL,CAAsBC,KAA3E,CAAP;AACD;AAED;;AACA;AACF;AACA;AACA;AACA;AACA;;;;;aACE,6BAA8BJ,IAA9B,EAAoDK,SAApD,EAAgF;AAC9E,eAAOL,IAAI,CAACM,WAAL,CAAkBC,WAAlB,GAAgCC,OAAhC,CAAwCH,SAAS,CAACE,WAAV,EAAxC,KAAoE,CAA3E;AACD;AACD;;AAEA;AACF;AACA;;;;;aACE,wBAAyB;AACvB,cAAME,KAAK,GAAG,KAAKC,gBAAL,CAAuB,KAAKC,WAAN,CAAwCC,YAA9D,CAAd;AACA,cAAMC,KAAK,GAAG,CAAC,KAAKV,gBAAL,CAAsBC,KAAvB,GAA+B,CAAC,CAAhC,GAAoCd,SAAS,CAACmB,KAAD,EAAQ,KAAKK,sBAAb,EAAqC,IAArC,CAA3D;AACAvB,QAAAA,OAAO,CAACkB,KAAD,EAAQ,CAACT,IAAD,EAAOe,CAAP,KAAa;AAC1B,cAAIA,CAAC,KAAKF,KAAV,EAAiB;AAAA;;AACf,kBAAMG,QAAQ,sBAAG,KAAKC,SAAR,oDAAG,gBAAgBC,qBAAhB,EAAjB;AACA,kBAAMC,QAAQ,GAAGnB,IAAI,CAACkB,qBAAL,EAAjB;;AAEA,gBAAIF,QAAQ,IAAIG,QAAhB,EAA0B;AACxB,oBAAMC,UAAU,GAAGJ,QAAQ,CAAEK,GAAV,KAAiBF,QAAjB,aAAiBA,QAAjB,uBAAiBA,QAAQ,CAAEE,GAA3B,KAAkC,CAAAF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,MAAV,KAAoB,CAAAN,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEK,GAAV,IAAgB,KAAKJ,SAAL,CAAgBM,YAAzG;;AACA,kBAAI,CAACH,UAAL,EAAiB;AACf,sBAAMI,SAAS,GAAG,CAAAL,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,GAAV,KAAgBL,QAAhB,aAAgBA,QAAhB,uBAAgBA,QAAQ,CAAEK,GAA1B,CAAlB;AACA,sBAAMI,SAAS,GAAG,CAAAN,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,MAAV,KAAmBN,QAAnB,aAAmBA,QAAnB,uBAAmBA,QAAQ,CAAEM,MAA7B,CAAlB;;AAEA,oBAAII,IAAI,CAACC,GAAL,CAASH,SAAT,IAAsBE,IAAI,CAACC,GAAL,CAASF,SAAT,CAA1B,EAA+C;AAC7C,uBAAKR,SAAL,CAAgBO,SAAhB,IAA6BA,SAA7B;AACD,iBAFD,MAEO;AACL,uBAAKP,SAAL,CAAgBO,SAAhB,IAA6BC,SAA7B;AACD;AACF;AACF;AACF;;AACAzB,UAAAA,IAAD,CAAyB4B,WAAzB,GAAuCb,CAAC,KAAKF,KAA7C;AACD,SApBM,CAAP;AAqBA,cAAM;AAAEV,UAAAA,gBAAgB,EAAE0B;AAApB,YAAoC,IAA1C;AACA,aAAKC,iBAAL,GAAyB,CAACD,WAAD,GAAe,EAAf,GAAoBA,WAAW,CAACzB,KAAzD;AACA,aAAK2B,IAAL,GAAY,IAAZ;AACA,aAAKC,aAAL,GA3BuB,CA2BD;AACvB;;;;aAED,2BAA4BC,KAA5B,EAA+C;AAAA;;AAC7C,qCAAI,KAAKC,oBAAT,kDAAI,sBAA2BC,QAA3B,CAAoCF,KAAK,CAACG,MAA1C,CAAJ,EAA+D;AAC7D,eAAKC,8BAAL;AACD,SAFD,MAEO;AACL,+BAnFAtC,UAmFA,mDAAwBkC,KAAxB;AACD;AACF;;;;aAED,8BAA+BA,KAA/B,EAAqD;AAAA;;AACnD,cAAM;AAAEK,UAAAA;AAAF,YAAUL,KAAhB;AACA,cAAMM,MAAM,GAAI,KAAK5B,WAAN,CAAwC6B,SAAxC,CAAkDF,GAAlD,CAAf;AACA,cAAM;AAAEG,UAAAA;AAAF,YAAiBhD,wBAAvB;;AACA,YACE,+BAAKyC,oBAAL,0EAA2BC,QAA3B,CAAoCF,KAAK,CAACG,MAA1C,OACA;AACCG,QAAAA,MAAM,KAAKE,UAAX,IAAyBH,GAAG,KAAK,GAFlC,CADF,EAIE;AACA,eAAKD,8BAAL;AACD,SAND,MAMO;AACL,+BAlGAtC,UAkGA,sDAA2BkC,KAA3B;AACD;AACF;AAED;AACF;AACA;;;;;aACE,0CAA2C;AACzC1C,QAAAA,OAAO,CAAC,KAAKmB,gBAAL,CAAuB,KAAKC,WAAN,CAAwCC,YAA9D,CAAD,EAA8EZ,IAAI,IAAI;AAC1FA,UAAAA,IAAD,CAAyB4B,WAAzB,GAAuC,KAAvC;AACD,SAFM,CAAP;AAGA,aAAKE,iBAAL,GAAyB,EAAzB;;AACA,aAAK3B,gBAAL,CAAsBuC,KAAtB;;AACA,aAAKC,8BAAL;AACD;;;;aAED,wCAAyC3C,IAAzC,EAAgE;AAC9D,YAAIA,IAAI,IAAI,CAAC,KAAK4C,sBAAL,CAA4B5C,IAA5B,CAAb,EAAgD;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAK8B,iBAAL,GAAyB9B,IAAI,CAACM,WAAL,IAAoB,EAA7C;AACA,eAAKyB,IAAL,GAAY,KAAZ;AACA,eAAKC,aAAL;AACD;;AACD,6BAhIEjC,UAgIF,gEAAqCC,IAArC;AACD;;;;aAED,6BAA8B6C,YAA9B,EAA6D;AAC3D,aAAKzC,KAAL,GAAa,CAACyC,YAAD,GAAgB,EAAhB,GAAqBA,YAAY,CAACzC,KAA/C;AACAb,QAAAA,OAAO,CAAC,KAAKmB,gBAAL,CAAuB,KAAKC,WAAN,CAAwCmC,oBAA9D,CAAD,EAAsF9C,IAAI,IAAI;AAClGA,UAAAA,IAAD,CAAyB+C,QAAzB,GAAoC,KAApC;AACD,SAFM,CAAP;;AAGA,YAAIF,YAAJ,EAAkB;AAChBA,UAAAA,YAAY,CAACE,QAAb,GAAwB,IAAxB;AACA,eAAKC,oBAAL,GAA4B,KAAKC,yBAAjC;AACD;;AACD,aAAKC,0BAAL,CAAgC,KAAhC;AACD;;;;aAED,iCAAkD;AAChD,cAAM;AAAEC,UAAAA,QAAF;AAAYC,UAAAA,UAAZ;AAAwBC,UAAAA,cAAxB;AAAwCvB,UAAAA,iBAAiB,EAAEwB,gBAA3D;AAA6EC,UAAAA,YAAY,EAAEC;AAA3F,YAA2G,IAAjH;AACA,eAAOvE,IAAP,6NAGaa,MAHb,EAIgBqD,QAJhB,EAKmBE,cALnB,EAMaC,gBANb,EAQkBF,UARlB,EAWaI,WAXb;AAaD;;;;aAED,0CAAkE;AAChE,cAAM;AAAEC,UAAAA,mBAAF;AAAuB3B,UAAAA,iBAAiB,EAAEwB;AAA1C,YAA+D,IAArE;AACA,eAAOA,gBAAgB,CAACI,MAAjB,KAA4B,CAA5B,GACHC,SADG,GAEH1E,IAFG,wIAMUa,MANV,EAQU2D,mBARV,EASGpE,OAAO,CAAC;AAAE,wBAAcoE;AAAhB,SAAD,CATV,CAAP;AAYD;AAED;AACF;AACA;;;;mBACGvE,QAAQ,CAAC;AAAE0E,QAAAA,SAAS,EAAE;AAAb,OAAD,C;;;;eACa,E;;;;;mBAKrB1E,QAAQ,CAAC;AAAE0E,QAAAA,SAAS,EAAE;AAAb,OAAD,C;;;;eACI,E;;;;;mBAKZ1E,QAAQ,CAAC;AAAE0E,QAAAA,SAAS,EAAE;AAAb,OAAD,C;;;;;;;AATT;AACF;AACA;;AAIE;AACF;AACA;AAIE,4BAAaC,iBAAb,EAAgC;AAC9B,6BAnME9D,UAmMF,8CAAmB8D,iBAAnB;;AACA,cAAM;AAAEC,UAAAA,oBAAoB,EAAEC;AAAxB,YAAgD,IAAtD;;AACA,YAAIA,mBAAmB,IAAIF,iBAAiB,CAACG,GAAlB,CAAsB,OAAtB,CAA3B,EAA2D;AACzD,eAAKlC,iBAAL,GAAyB,CAAAiC,mBAAmB,SAAnB,IAAAA,mBAAmB,WAAnB,YAAAA,mBAAmB,CAAEzD,WAArB,KAAoC,EAA7D;AACD;;AACD,eAAO,IAAP;AACD;;;;aAED,mBAAU;AACR,cAAM;AAAE2D,UAAAA,YAAY,EAAEC;AAAhB,YAAgC,IAAtC;;AACA,YAAIA,WAAJ,EAAiB;AACfA,UAAAA,WAAW,CAACC,SAAZ,CAAsBC,GAAtB,CAA2B,GAAEtE,MAAO,aAApC;AACD;AACF,O,CAED;;;;;;;;eACsB,IAAIuE,GAAJ,CAAQ,CAAC,OAAD,CAAR,C;;;;;;;;AAEtB;AACF;AACA;AACE,yCAAqC;AACnC,eAAQ,GAAEvE,MAAO,8BAAjB;AACD;AAED;AACF;AACA;;;;;;aACE,wBAA0B;AACxB,eAAQ,GAAEA,MAAO,iBAAjB;AACD;AAED;AACF;AACA;;;;;;aACE,gCAAkC;AAChC,eAAQ,GAAEA,MAAO,2BAAjB;AACD;AAED;AACF;AACA;AACA;;;;;;aACE,6BAA+B;AAC7B,eAAQ,GAAEA,MAAO,yBAAjB;AACD;AAED;AACF;AACA;;;;;;aACE,uBAAyB;AACvB,eAAQ,GAAEA,MAAO,oBAAjB;AACD;AAED;AACF;AACA;AACA;;;;;;aACE,6BAA+B;AAC7B,eAAQ,GAAEA,MAAO,0BAAjB;AACD;AAED;AACF;AACA;;;;;;aACE,uBAAyB;AACvB,eAAQ,GAAEA,MAAO,qBAAjB;AACD;;;;;;;eAEeJ,M;;;;;GAxQOF,U;;AA2QzB,eAAeO,UAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { TemplateResult } from 'lit-html';\nimport { html, property, query, customElement } from 'lit-element';\nimport Close16 from '@carbon/icons/lib/close/16';\nimport { findIndex, forEach } from '../../globals/internal/collection-helpers';\nimport BXDropdown, { DROPDOWN_KEYBOARD_ACTION } from '../dropdown/dropdown';\nimport BXComboBoxItem from './combo-box-item';\nimport styles from './combo-box.scss';\n\nexport { DROPDOWN_COLOR_SCHEME, DROPDOWN_SIZE, DROPDOWN_TYPE } from '../dropdown/dropdown';\n\nconst { prefix } = settings;\n\n/**\n * Combo box.\n * @element bx-combo-box\n * @fires bx-combo-box-beingselected\n *   The custom event fired before a combo box item is selected upon a user gesture.\n *   Cancellation of this event stops changing the user-initiated selection.\n * @fires bx-combo-box-beingtoggled\n *   The custom event fired before the open state of this combo box is toggled upon a user gesture.\n *   Cancellation of this event stops the user-initiated toggling.\n * @fires bx-combo-box-selected - The custom event fired after a combo box item is selected upon a user gesture.\n * @fires bx-combo-box-toggled - The custom event fired after the open state of this combo box is toggled upon a user gesture.\n */\n@customElement(`${prefix}-combo-box`)\nclass BXComboBox extends BXDropdown {\n  /**\n   * The text content that should be set to the `<input>` for filtering.\n   */\n  protected _filterInputValue = '';\n\n  protected _shouldTriggerBeFocusable = false;\n\n  /**\n   * The `<input>` for filtering.\n   */\n  @query('input')\n  private _filterInputNode!: HTMLInputElement;\n\n  /**\n   * The menu containing all selectable items.\n   */\n  @query('#menu-body')\n  private _itemMenu!: HTMLElement;\n\n  /**\n   * The selection button.\n   */\n  @query('#selection-button')\n  private _selectionButtonNode!: HTMLElement;\n\n  /**\n   * @param item A combo box item.\n   * @returns `true` if the given combo box item matches the query text user types.\n   */\n  protected _testItemWithQueryText(item) {\n    return (this.itemMatches || this._defaultItemMatches)(item, this._filterInputNode.value);\n  }\n\n  /* eslint-disable class-methods-use-this */\n  /**\n   * The default item matching callback.\n   * @param item The combo box item.\n   * @param queryText The query text user types.\n   * @returns `true` if the given combo box item matches the given query text.\n   */\n  protected _defaultItemMatches(item: BXComboBoxItem, queryText: string): boolean {\n    return item.textContent!.toLowerCase().indexOf(queryText.toLowerCase()) >= 0;\n  }\n  /* eslint-enable class-methods-use-this */\n\n  /**\n   * Handles `input` event on the `<input>` for filtering.\n   */\n  protected _handleInput() {\n    const items = this.querySelectorAll((this.constructor as typeof BXComboBox).selectorItem);\n    const index = !this._filterInputNode.value ? -1 : findIndex(items, this._testItemWithQueryText, this);\n    forEach(items, (item, i) => {\n      if (i === index) {\n        const menuRect = this._itemMenu?.getBoundingClientRect();\n        const itemRect = item.getBoundingClientRect();\n\n        if (menuRect && itemRect) {\n          const isViewable = menuRect!.top <= itemRect?.top && itemRect?.bottom <= menuRect?.top + this._itemMenu!.clientHeight;\n          if (!isViewable) {\n            const scrollTop = itemRect?.top - menuRect?.top;\n            const scrollBot = itemRect?.bottom - menuRect?.bottom;\n\n            if (Math.abs(scrollTop) < Math.abs(scrollBot)) {\n              this._itemMenu!.scrollTop += scrollTop;\n            } else {\n              this._itemMenu!.scrollTop += scrollBot;\n            }\n          }\n        }\n      }\n      (item as BXComboBoxItem).highlighted = i === index;\n    });\n    const { _filterInputNode: filterInput } = this;\n    this._filterInputValue = !filterInput ? '' : filterInput.value;\n    this.open = true;\n    this.requestUpdate(); // If the only change is to `_filterInputValue`, auto-update doesn't happen\n  }\n\n  protected _handleClickInner(event: MouseEvent) {\n    if (this._selectionButtonNode?.contains(event.target as Node)) {\n      this._handleUserInitiatedClearInput();\n    } else {\n      super._handleClickInner(event);\n    }\n  }\n\n  protected _handleKeypressInner(event: KeyboardEvent) {\n    const { key } = event;\n    const action = (this.constructor as typeof BXDropdown).getAction(key);\n    const { TRIGGERING } = DROPDOWN_KEYBOARD_ACTION;\n    if (\n      this._selectionButtonNode?.contains(event.target as Node) &&\n      // Space key should be handled by `<input>` unless \"clear selection\" button has focus\n      (action === TRIGGERING || key === ' ')\n    ) {\n      this._handleUserInitiatedClearInput();\n    } else {\n      super._handleKeypressInner(event);\n    }\n  }\n\n  /**\n   * Handles user-initiated clearing the `<input>` for filtering.\n   */\n  protected _handleUserInitiatedClearInput() {\n    forEach(this.querySelectorAll((this.constructor as typeof BXComboBox).selectorItem), item => {\n      (item as BXComboBoxItem).highlighted = false;\n    });\n    this._filterInputValue = '';\n    this._filterInputNode.focus();\n    this._handleUserInitiatedSelectItem();\n  }\n\n  protected _handleUserInitiatedSelectItem(item?: BXComboBoxItem) {\n    if (item && !this._selectionShouldChange(item)) {\n      // Escape hatch for `shouldUpdate()` logic that updates `._filterInputValue()` when selection changes,\n      // given we want to update the `<input>` and close the dropdown even if selection doesn't update.\n      // Use case:\n      // 1. Select the 2nd item in combo box drop down\n      // 2. Type some text in the `<input>`\n      // 3. Re-select the 2nd item in combo box drop down,\n      //    the `<input>` has to updated with the 2nd item and the dropdown should be closed,\n      //    even if there is no change in the selected value\n      this._filterInputValue = item.textContent || '';\n      this.open = false;\n      this.requestUpdate();\n    }\n    super._handleUserInitiatedSelectItem(item);\n  }\n\n  protected _selectionDidChange(itemToSelect?: BXComboBoxItem) {\n    this.value = !itemToSelect ? '' : itemToSelect.value;\n    forEach(this.querySelectorAll((this.constructor as typeof BXDropdown).selectorItemSelected), item => {\n      (item as BXComboBoxItem).selected = false;\n    });\n    if (itemToSelect) {\n      itemToSelect.selected = true;\n      this._assistiveStatusText = this.selectedItemAssistiveText;\n    }\n    this._handleUserInitiatedToggle(false);\n  }\n\n  protected _renderTriggerContent(): TemplateResult {\n    const { disabled, inputLabel, triggerContent, _filterInputValue: filterInputValue, _handleInput: handleInput } = this;\n    return html`\n      <input\n        id=\"trigger-label\"\n        class=\"${prefix}--text-input\"\n        ?disabled=${disabled}\n        placeholder=\"${triggerContent}\"\n        .value=${filterInputValue}\n        role=\"combobox\"\n        aria-label=\"${inputLabel}\"\n        aria-controls=\"menu-body\"\n        aria-autocomplete=\"list\"\n        @input=${handleInput} />\n    `;\n  }\n\n  protected _renderFollowingTriggerContent(): TemplateResult | void {\n    const { clearSelectionLabel, _filterInputValue: filterInputValue } = this;\n    return filterInputValue.length === 0\n      ? undefined\n      : html`\n          <div\n            id=\"selection-button\"\n            role=\"button\"\n            class=\"${prefix}--list-box__selection\"\n            tabindex=\"0\"\n            title=\"${clearSelectionLabel}\">\n            ${Close16({ 'aria-label': clearSelectionLabel })}\n          </div>\n        `;\n  }\n\n  /**\n   * The `aria-label` attribute for the icon to clear selection.\n   */\n  @property({ attribute: 'clear-selection-label' })\n  clearSelectionLabel = '';\n\n  /**\n   * The `aria-label` attribute for the `<input>` for filtering.\n   */\n  @property({ attribute: 'input-label' })\n  inputLabel = '';\n\n  /**\n   * The custom item matching callback.\n   */\n  @property({ attribute: false })\n  itemMatches!: (item: BXComboBoxItem, queryText: string) => boolean;\n\n  shouldUpdate(changedProperties) {\n    super.shouldUpdate(changedProperties);\n    const { _selectedItemContent: selectedItemContent } = this;\n    if (selectedItemContent && changedProperties.has('value')) {\n      this._filterInputValue = selectedItemContent?.textContent || '';\n    }\n    return true;\n  }\n\n  updated() {\n    const { _listBoxNode: listBoxNode } = this;\n    if (listBoxNode) {\n      listBoxNode.classList.add(`${prefix}--combo-box`);\n    }\n  }\n\n  // For combo box, open/selection with space key is disabled given the input box should take it over\n  static TRIGGER_KEYS = new Set(['Enter']);\n\n  /**\n   * A selector that will return highlighted items.\n   */\n  static get selectorItemHighlighted() {\n    return `${prefix}-combo-box-item[highlighted]`;\n  }\n\n  /**\n   * A selector that will return combo box items.\n   */\n  static get selectorItem() {\n    return `${prefix}-combo-box-item`;\n  }\n\n  /**\n   * A selector that will return selected items.\n   */\n  static get selectorItemSelected() {\n    return `${prefix}-combo-box-item[selected]`;\n  }\n\n  /**\n   * The name of the custom event fired before this combo box item is being toggled upon a user gesture.\n   * Cancellation of this event stops the user-initiated action of toggling this combo box item.\n   */\n  static get eventBeforeToggle() {\n    return `${prefix}-combo-box-beingtoggled`;\n  }\n\n  /**\n   * The name of the custom event fired after this combo box item is toggled upon a user gesture.\n   */\n  static get eventToggle() {\n    return `${prefix}-combo-box-toggled`;\n  }\n\n  /**\n   * The name of the custom event fired before a combo box item is selected upon a user gesture.\n   * Cancellation of this event stops changing the user-initiated selection.\n   */\n  static get eventBeforeSelect() {\n    return `${prefix}-combo-box-beingselected`;\n  }\n\n  /**\n   * The name of the custom event fired after a a combo box item is selected upon a user gesture.\n   */\n  static get eventSelect() {\n    return `${prefix}-combo-box-selected`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXComboBox;\n"],"file":"combo-box.js"}