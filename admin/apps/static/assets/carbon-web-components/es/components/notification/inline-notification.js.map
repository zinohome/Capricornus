{"version":3,"sources":["components/notification/inline-notification.ts"],"names":["CheckmarkFilled20","Close20","ErrorFilled20","WarningFilled20","settings","customElement","html","LitElement","property","svg","ifDefined","FocusMixin","NOTIFICATION_KIND","NOTIFICATION_TYPE","styles","prefix","iconsForKinds","SUCCESS","INFO","undefined","WARNING","ERROR","BXInlineNotification","INLINE","timeoutID","clearTimeout","_timeoutID","timeout","_cancelTimeout","setTimeout","_handleUserOrTimerInitiatedClose","bind","target","triggeredBy","open","init","bubbles","cancelable","composed","detail","dispatchEvent","CustomEvent","constructor","eventBeforeClose","eventClose","closeButtonLabel","_type","type","_handleClickCloseButton","handleClickCloseButton","class","subtitle","title","iconLabel","kind","icon","children","attribute","Boolean","reflect","Number","hasAttribute","setAttribute","changedProperties","openChanged","has","timeoutChanged","_initializeTimeout","_renderIcon","_renderText","_renderButton"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport CheckmarkFilled20 from '@carbon/icons/lib/checkmark--filled/20';\nimport Close20 from '@carbon/icons/lib/close/20';\nimport ErrorFilled20 from '@carbon/icons/lib/error--filled/20';\nimport WarningFilled20 from '@carbon/icons/lib/warning--filled/20';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { customElement, html, LitElement, property, svg } from 'lit-element';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport FocusMixin from '../../globals/mixins/focus';\nimport { NOTIFICATION_KIND, NOTIFICATION_TYPE } from './defs';\nimport styles from './inline-notification.scss';\n\nexport { NOTIFICATION_KIND, NOTIFICATION_TYPE };\n\nconst { prefix } = settings;\n\n/**\n * The default icons, keyed by notification kind.\n */\nconst iconsForKinds = {\n  [NOTIFICATION_KIND.SUCCESS]: CheckmarkFilled20,\n  [NOTIFICATION_KIND.INFO]: undefined,\n  [NOTIFICATION_KIND.WARNING]: WarningFilled20,\n  [NOTIFICATION_KIND.ERROR]: ErrorFilled20,\n};\n\n/**\n * Inline notification.\n * @element bx-inline-notification\n * @slot subtitle - The subtitle.\n * @slot title - The title.\n * @fires bx-notification-beingclosed\n *   The custom event fired before this notification is being closed upon a user gesture.\n *   Cancellation of this event stops the user-initiated action of closing this notification.\n * @fires bx-notification-closed - The custom event fired after this notification is closed upon a user gesture.\n */\n@customElement(`${prefix}-inline-notification`)\nclass BXInlineNotification extends FocusMixin(LitElement) {\n  /**\n   * Current timeout identifier\n   */\n  protected _timeoutID: number | null = null;\n\n  /**\n   * Notification type.\n   */\n  protected _type = NOTIFICATION_TYPE.INLINE;\n\n  /**\n   * Cancels the current timeout configured for the notification\n   * @param timeoutID current timeout's identifier\n   */\n  protected _cancelTimeout(timeoutID: number) {\n    clearTimeout(timeoutID);\n    this._timeoutID = null;\n  }\n\n  /**\n   * Overrides (if exists) the timeout to close the notification\n   * @param timeout the time in ms\n   */\n  protected _initializeTimeout(timeout: number) {\n    if (this._timeoutID) {\n      this._cancelTimeout(this._timeoutID);\n    }\n    this._timeoutID = setTimeout(this._handleUserOrTimerInitiatedClose.bind(this, null), timeout) as unknown as number;\n  }\n\n  /**\n   * Handles `click` event on the close button.\n   * @param event The event.\n   */\n  protected _handleClickCloseButton({ target }: MouseEvent) {\n    this._handleUserOrTimerInitiatedClose(target);\n  }\n\n  /**\n   * Handles user-initiated or through timer close request of this modal.\n   * @param triggeredBy The element that triggered this close request, if there is one.\n   */\n  protected _handleUserOrTimerInitiatedClose(triggeredBy: EventTarget | null) {\n    if (this.open) {\n      const init = {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: {\n          triggeredBy,\n        },\n      };\n      if (this.dispatchEvent(new CustomEvent((this.constructor as typeof BXInlineNotification).eventBeforeClose, init))) {\n        this.open = false;\n        this.dispatchEvent(new CustomEvent((this.constructor as typeof BXInlineNotification).eventClose, init));\n      }\n    }\n  }\n\n  /**\n   * @returns The template part for the close button.\n   */\n  protected _renderButton() {\n    const { closeButtonLabel, _type: type, _handleClickCloseButton: handleClickCloseButton } = this;\n    return html`\n      <button\n        type=\"button\"\n        class=\"${prefix}--${type}-notification__close-button\"\n        aria-label=${ifDefined(closeButtonLabel)}\n        title=${ifDefined(closeButtonLabel)}\n        @click=\"${handleClickCloseButton}\">\n        ${Close20({\n          class: `${prefix}--${type}-notification__close-icon`,\n        })}\n      </button>\n    `;\n  }\n\n  /**\n   * @returns The template part for the text contents.\n   */\n  protected _renderText() {\n    const { subtitle, title, _type: type } = this;\n    return html`\n      <div class=\"${prefix}--${type}-notification__text-wrapper\">\n        <p class=\"${prefix}--${type}-notification__title\">${title}<slot name=\"title\"></slot></p>\n        <div class=\"${prefix}--${type}-notification__subtitle\">${subtitle}<slot name=\"subtitle\"></slot></div>\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  /**\n   * @returns The template part for the icon.\n   */\n  protected _renderIcon() {\n    const { iconLabel, kind, _type: type } = this;\n    const { [kind]: icon } = iconsForKinds;\n    return !icon\n      ? undefined\n      : icon({\n          class: `${prefix}--${type}-notification__icon`,\n          children: !iconLabel ? undefined : svg`<title>${iconLabel}</title>`,\n        });\n  }\n\n  /**\n   * The a11y text for the close button.\n   */\n  @property({ attribute: 'close-button-label' })\n  closeButtonLabel!: string;\n\n  /**\n   * `true` to hide the close button.\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'hide-close-button' })\n  hideCloseButton = false;\n\n  /**\n   * The a11y text for the icon.\n   */\n  @property({ attribute: 'icon-label' })\n  iconLabel!: string;\n\n  /**\n   * Notification kind.\n   */\n  @property({ reflect: true })\n  kind = NOTIFICATION_KIND.SUCCESS;\n\n  /**\n   * Low contrast mode\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'low-contrast' })\n  lowContrast = false;\n\n  /**\n   * `true` if the notification should be open.\n   */\n  @property({ type: Boolean, reflect: true })\n  open = true;\n\n  /**\n   * Notification time in ms until gets closed.\n   */\n  @property({ type: Number, reflect: true })\n  timeout: number | null = null;\n\n  /**\n   * The subtitle.\n   */\n  @property()\n  subtitle = '';\n\n  /**\n   * The title.\n   */\n  @property()\n  title = '';\n\n  connectedCallback() {\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'alert');\n    }\n    super.connectedCallback();\n  }\n\n  updated(changedProperties) {\n    const openChanged = changedProperties.has('open');\n    const timeoutChanged = changedProperties.has('timeout');\n\n    if (openChanged || timeoutChanged) {\n      if (this.open && this.timeout) {\n        this._initializeTimeout(this.timeout);\n      } else if (!this.open && this._timeoutID) {\n        this._cancelTimeout(this._timeoutID);\n      }\n    }\n  }\n\n  render() {\n    const { _type: type } = this;\n    return html`\n      <div class=\"${prefix}--${type}-notification__details\">${this._renderIcon()}${this._renderText()}</div>\n      ${this._renderButton()}\n    `;\n  }\n\n  /**\n   * The name of the custom event fired before this notification is being closed upon a user gesture.\n   * Cancellation of this event stops the user-initiated action of closing this notification.\n   */\n  static get eventBeforeClose() {\n    return `${prefix}-notification-beingclosed`;\n  }\n\n  /**\n   * The name of the custom event fired after this notification is closed upon a user gesture.\n   */\n  static get eventClose() {\n    return `${prefix}-notification-closed`;\n  }\n\n  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader\n}\n\nexport default BXInlineNotification;\n"],"file":"inline-notification.js"}