{"version":3,"sources":["components/input/input.ts"],"names":["html","property","query","customElement","LitElement","classMap","settings","WarningFilled16","ifNonEmpty","FormMixin","ValidityMixin","INPUT_COLOR_SCHEME","INPUT_SIZE","INPUT_TYPE","styles","prefix","BXInput","target","value","event","formData","disabled","name","append","type","Boolean","attribute","reflect","REGULAR","TEXT","_input","_value","oldValue","requestUpdate","attachShadow","mode","delegatesFocus","Number","exec","navigator","userAgent","_handleInput","handleInput","invalidIcon","class","inputClasses","colorScheme","invalid","size","labelClasses","helperTextClasses","labelText","autocomplete","autofocus","pattern","placeholder","readonly","required","helperText","validityMessage"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html, property, query, customElement, LitElement } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport WarningFilled16 from '@carbon/icons/lib/warning--filled/16';\nimport ifNonEmpty from '../../globals/directives/if-non-empty';\nimport FormMixin from '../../globals/mixins/form';\nimport ValidityMixin from '../../globals/mixins/validity';\nimport { INPUT_COLOR_SCHEME, INPUT_SIZE, INPUT_TYPE } from './defs';\nimport styles from './input.scss';\n\nexport { INPUT_COLOR_SCHEME, INPUT_SIZE, INPUT_TYPE };\n\nconst { prefix } = settings;\n\n/**\n * Input element. Supports all the usual attributes for textual input types\n * @element bx-input\n * @slot helper-text - The helper text.\n * @slot label-text - The label text.\n * @slot validity-message - The validity message. If present and non-empty, this input shows the UI of its invalid state.\n */\n@customElement(`${prefix}-input`)\nexport default class BXInput extends ValidityMixin(FormMixin(LitElement)) {\n  /**\n   * The underlying input element\n   */\n  @query('input')\n  protected _input!: HTMLInputElement;\n\n  /**\n   * The internal value.\n   */\n  protected _value = '';\n\n  /**\n   * Handles `oninput` event on the `<input>`.\n   * @param event The event.\n   */\n  protected _handleInput({ target }: Event) {\n    this.value = (target as HTMLInputElement).value;\n  }\n\n  _handleFormdata(event: Event) {\n    const { formData } = event as any; // TODO: Wait for `FormDataEvent` being available in `lib.dom.d.ts`\n    const { disabled, name, value } = this;\n    if (!disabled) {\n      formData.append(name, value);\n    }\n  }\n\n  /**\n   * May be any of the standard HTML autocomplete options\n   */\n  @property()\n  autocomplete = '';\n\n  /**\n   * Sets the input to be focussed automatically on page load. Defaults to false\n   */\n  @property({ type: Boolean })\n  autofocus = false;\n\n  /**\n   * The color scheme.\n   */\n  @property({ attribute: 'color-scheme', reflect: true })\n  colorScheme = INPUT_COLOR_SCHEME.REGULAR;\n\n  /**\n   * Controls the disabled state of the input\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  /**\n   * The helper text.\n   */\n  @property({ attribute: 'helper-text' })\n  helperText = '';\n\n  /**\n   * Controls the invalid state and visibility of the `validityMessage`\n   */\n  @property({ type: Boolean, reflect: true })\n  invalid = false;\n\n  /**\n   * The label text.\n   */\n  @property({ attribute: 'label-text' })\n  labelText = '';\n\n  /**\n   * Name for the input in the `FormData`\n   */\n  @property()\n  name = '';\n\n  /**\n   * Pattern to validate the input against for HTML validity checking\n   */\n  @property()\n  pattern = '';\n\n  /**\n   * Value to display when the input has an empty `value`\n   */\n  @property({ reflect: true })\n  placeholder = '';\n\n  /**\n   * Controls the readonly state of the input\n   */\n  @property({ type: Boolean, reflect: true })\n  readonly = false;\n\n  /**\n   * Boolean property to set the required status\n   */\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  /**\n   * The special validity message for `required`.\n   */\n  @property({ attribute: 'required-validity-message' })\n  requiredValidityMessage = 'Please fill out this field.';\n\n  /**\n   * The input box size.\n   */\n  @property({ reflect: true })\n  size = INPUT_SIZE.REGULAR;\n\n  /**\n   * The type of the input. Can be one of the types listed in the INPUT_TYPE enum\n   */\n  @property({ reflect: true })\n  type = INPUT_TYPE.TEXT;\n\n  /**\n   * The validity message. If present and non-empty, this input shows the UI of its invalid state.\n   */\n  @property({ attribute: 'validity-message' })\n  validityMessage = '';\n\n  /**\n   * The value of the input.\n   */\n  @property({ reflect: true })\n  get value() {\n    // FIXME: Figure out how to deal with TS2611\n    // once we have the input we can directly query for the value\n    if (this._input) {\n      return this._input.value;\n    }\n    // but before then _value will work fine\n    return this._value;\n  }\n\n  set value(value) {\n    const oldValue = this._value;\n    this._value = value;\n    // make sure that lit-element updates the right properties\n    this.requestUpdate('value', oldValue);\n    // we set the value directly on the input (when available)\n    // so that programatic manipulation updates the UI correctly\n    if (this._input) {\n      this._input.value = value;\n    }\n  }\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: 'open',\n      delegatesFocus: Number((/Safari\\/(\\d+)/.exec(navigator.userAgent) ?? ['', 0])[1]) <= 537,\n    });\n  }\n\n  render() {\n    const { _handleInput: handleInput } = this;\n\n    const invalidIcon = WarningFilled16({ class: `${prefix}--text-input__invalid-icon` });\n\n    const inputClasses = classMap({\n      [`${prefix}--text-input`]: true,\n      [`${prefix}--text-input--${this.colorScheme}`]: this.colorScheme,\n      [`${prefix}--text-input--invalid`]: this.invalid,\n      [`${prefix}--text-input--${this.size}`]: this.size,\n    });\n\n    const labelClasses = classMap({\n      [`${prefix}--label`]: true,\n      [`${prefix}--label--disabled`]: this.disabled,\n    });\n\n    const helperTextClasses = classMap({\n      [`${prefix}--form__helper-text`]: true,\n      [`${prefix}--form__helper-text--disabled`]: this.disabled,\n    });\n\n    return html`\n      <label class=\"${labelClasses}\" for=\"input\">\n        <slot name=\"label-text\"> ${this.labelText} </slot>\n      </label>\n      <div class=\"${prefix}--text-input__field-wrapper\" ?data-invalid=\"${this.invalid}\">\n        ${this.invalid ? invalidIcon : null}\n        <input\n          ?autocomplete=\"${this.autocomplete}\"\n          ?autofocus=\"${this.autofocus}\"\n          class=\"${inputClasses}\"\n          ?data-invalid=\"${this.invalid}\"\n          ?disabled=\"${this.disabled}\"\n          id=\"input\"\n          name=\"${ifNonEmpty(this.name)}\"\n          pattern=\"${ifNonEmpty(this.pattern)}\"\n          placeholder=\"${ifNonEmpty(this.placeholder)}\"\n          ?readonly=\"${this.readonly}\"\n          ?required=\"${this.required}\"\n          type=\"${ifNonEmpty(this.type)}\"\n          .value=\"${this._value}\"\n          @input=\"${handleInput}\" />\n      </div>\n      <div class=\"${helperTextClasses}\">\n        <slot name=\"helper-text\"> ${this.helperText} </slot>\n      </div>\n      <div class=\"${prefix}--form-requirement\">\n        <slot name=\"validity-message\"> ${this.validityMessage} </slot>\n      </div>\n    `;\n  }\n\n  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader\n}\n"],"file":"input.js"}