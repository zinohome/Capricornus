{"version":3,"sources":["components/copy-button/copy-button.ts"],"names":["classMap","ifDefined","html","property","customElement","LitElement","Copy16","settings","FocusMixin","styles","prefix","_createHandleFeedbackTooltip","update","timeoutId","timeout","clearTimeout","undefined","showFeedback","setTimeout","_renderButton","assistiveText","feedbackText","className","children","class","handleClickButton","feedbackClasses","BXCopyButton","_showFeedback","requestUpdate","_handleFeedbackTooltip","feedbackTimeout","attribute","type","Number","attachShadow","mode","delegatesFocus","exec","navigator","userAgent","buttonAssistiveText","_handleClickButton"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit-html/directives/class-map';\nimport { TemplateResult } from 'lit-html';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport { html, property, customElement, LitElement } from 'lit-element';\nimport Copy16 from '@carbon/icons/lib/copy/16';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport FocusMixin from '../../globals/mixins/focus';\nimport styles from './copy-button.scss';\n\nconst { prefix } = settings;\n\n/**\n * Note: For `<bx-code-snippet>` only. The API is subject to change/removal.\n * @param update The callback function that dictates how to update the DOM with new feedback tooltip state.\n * @returns A function that shows the feedback tooltip for the given duration.\n * @private\n */\nexport const _createHandleFeedbackTooltip = (update: (properties: { showFeedback?: boolean }) => void) => {\n  let timeoutId: number | void;\n  return (timeout: number) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      timeoutId = undefined;\n    }\n    update({ showFeedback: true });\n    timeoutId = setTimeout(() => {\n      update({ showFeedback: false });\n    }, timeout) as unknown as number;\n  };\n};\n\n/**\n * Note: For `<bx-code-snippet>` only. The API is subject to change/removal.\n * @param properties The properties to render.\n * @returns The template result for copy button from the given properties.\n * @private\n */\nexport const _renderButton = ({\n  assistiveText,\n  feedbackText,\n  showFeedback = false,\n  className = `${prefix}--snippet-button`,\n  children = html` <slot>${Copy16({ class: `${prefix}--snippet__icon` })}</slot> `,\n  handleClickButton,\n}: {\n  assistiveText: string;\n  feedbackText: string;\n  showFeedback?: boolean;\n  className?: string;\n  children?: TemplateResult;\n  handleClickButton: EventListener;\n}) => {\n  const feedbackClasses = classMap({\n    [`${prefix}--btn--copy__feedback`]: true,\n    [`${prefix}--btn--copy__feedback--displayed`]: showFeedback,\n  });\n  return html`\n    <button type=\"button\" class=\"${className}\" title=\"${ifDefined(assistiveText)}\" @click=\"${handleClickButton}\">\n      ${children}\n      <div class=\"${feedbackClasses}\" data-feedback=\"${ifDefined(feedbackText)}\"></div>\n    </button>\n  `;\n};\n\n/**\n * Copy button.\n * @element bx-copy-button\n */\n@customElement(`${prefix}-copy-button`)\nclass BXCopyButton extends FocusMixin(LitElement) {\n  /**\n   * Handles showing/hiding the feedback tooltip.\n   */\n  private _handleFeedbackTooltip = _createHandleFeedbackTooltip(({ showFeedback = false }: { showFeedback?: boolean }) => {\n    this._showFeedback = showFeedback;\n    this.requestUpdate();\n  });\n\n  /**\n   * `true` to show the feedback tooltip.\n   */\n  private _showFeedback = false;\n\n  /**\n   * Handles `click` event on the copy button.\n   */\n  private _handleClickButton() {\n    this._handleFeedbackTooltip(this.feedbackTimeout);\n  }\n\n  /**\n   * An assistive text for screen reader to announce, telling that the button copies the content to the clipboard.\n   */\n  @property({ attribute: 'button-assistive-text' })\n  buttonAssistiveText = 'Copy to clipboard';\n\n  /**\n   * The feedback text.\n   */\n  @property({ attribute: 'feedback-text' })\n  feedbackText = 'Copied!';\n\n  /**\n   * The number in milliseconds to determine how long the tooltip should remain.\n   */\n  @property({ type: Number, attribute: 'feedback-timeout' })\n  feedbackTimeout = 2000;\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: 'open',\n      delegatesFocus: Number((/Safari\\/(\\d+)/.exec(navigator.userAgent) ?? ['', 0])[1]) <= 537,\n    });\n  }\n\n  render() {\n    const { buttonAssistiveText, feedbackText, _handleClickButton: handleClickButton, _showFeedback: showFeedback } = this;\n    return _renderButton({\n      assistiveText: buttonAssistiveText,\n      feedbackText,\n      showFeedback,\n      handleClickButton,\n    });\n  }\n\n  static styles = styles;\n}\n\nexport default BXCopyButton;\n"],"file":"copy-button.js"}