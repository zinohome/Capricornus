{"version":3,"sources":["components/toggle/toggle.ts"],"names":["classMap","html","property","customElement","settings","ifNonNull","BXCheckbox","TOGGLE_SIZE","styles","prefix","BXToggle","size","SMALL","undefined","attribute","reflect","REGULAR","checked","checkedText","disabled","labelText","name","uncheckedText","value","_handleChange","handleChange","inputClasses","String","Boolean","_renderCheckmark"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,+BAAzB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,aAAzB,QAA8C,aAA9C;AACA,OAAOC,QAAP,MAAqB,0CAArB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASD,WAAT;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAaL,QAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMM,Q,cADLP,aAAa,CAAE,GAAEM,MAAO,SAAX,C;AAAd,QACMC,QADN,qBACkC;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;OAA5BA,Q;;;;aACJ,4BAA6B;AAC3B,YAAI,KAAKC,IAAL,KAAcJ,WAAW,CAACK,KAA9B,EAAqC;AACnC,iBAAOC,SAAP;AACD;;AACD,eAAOZ,IAAP,wJACgBQ,MADhB;AAKD;AAED;AACF;AACA;;;;mBACGP,QAAQ,CAAC;AAAEY,QAAAA,SAAS,EAAE;AAAb,OAAD,C;;;;eACK,E;;;;;mBAKbZ,QAAQ,CAAC;AAAEa,QAAAA,OAAO,EAAE;AAAX,OAAD,C;;;;eACFR,WAAW,CAACS,O;;;;;mBAKlBd,QAAQ,CAAC;AAAEY,QAAAA,SAAS,EAAE;AAAb,OAAD,C;;;;eACO,E;;;;;;;AAVhB;AACF;AACA;;AAIE;AACF;AACA;AAIE,wBAAS;AACP,cAAM;AAAEG,UAAAA,OAAF;AAAWC,UAAAA,WAAX;AAAwBC,UAAAA,QAAxB;AAAkCC,UAAAA,SAAlC;AAA6CC,UAAAA,IAA7C;AAAmDV,UAAAA,IAAnD;AAAyDW,UAAAA,aAAzD;AAAwEC,UAAAA,KAAxE;AAA+EC,UAAAA,aAAa,EAAEC;AAA9F,YAA+G,IAArH;AACA,cAAMC,YAAY,GAAG1B,QAAQ,CAAC;AAC5B,WAAE,GAAES,MAAO,gBAAX,GAA6B,IADD;AAE5B,WAAE,GAAEA,MAAO,mBAAkBE,IAAK,EAAlC,GAAsCA;AAFV,SAAD,CAA7B;AAIA,eAAOV,IAAP,8gBAIayB,YAJb,EAKoBC,MAAM,CAACC,OAAO,CAACX,OAAD,CAAR,CAL1B,EAMgBA,OANhB,EAOiBE,QAPjB,EAQYd,SAAS,CAACgB,IAAD,CARrB,EASahB,SAAS,CAACkB,KAAD,CATtB,EAUeE,YAVf,EAWiChB,MAXjC,EAY8BW,SAZ9B,EAamBX,MAbnB,EAcQ,KAAKoB,gBAAL,EAdR,EAeqBpB,MAfrB,EAgBsCa,aAhBtC,EAkBqBb,MAlBrB,EAmBoCS,WAnBpC;AAwBD;AAED;AACF;AACA;;;;;;aACE,uBAAyB;AACvB,eAAQ,GAAET,MAAO,iBAAjB;AACD;;;;;;;eAEeD,M;;;;;GArEKF,U;;AAwEvB,eAAeI,QAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit-html/directives/class-map';\nimport { html, property, customElement } from 'lit-element';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport ifNonNull from '../../globals/directives/if-non-null';\nimport BXCheckbox from '../checkbox/checkbox';\nimport { TOGGLE_SIZE } from './defs';\nimport styles from './toggle.scss';\n\nexport { TOGGLE_SIZE };\n\nconst { prefix } = settings;\n\n/**\n * Basic toggle.\n * @element bx-toggle\n * @slot label-text - The label text.\n * @slot checked-text - The text for the checked state.\n * @slot unchecked-text - The text for the unchecked state.\n * @fires bx-toggle-changed - The custom event fired after this changebox changes its checked state.\n */\n@customElement(`${prefix}-toggle`)\nclass BXToggle extends BXCheckbox {\n  protected _renderCheckmark() {\n    if (this.size !== TOGGLE_SIZE.SMALL) {\n      return undefined;\n    }\n    return html`\n      <svg class=\"${prefix}--toggle__check\" width=\"6px\" height=\"5px\" viewBox=\"0 0 6 5\">\n        <path d=\"M2.2 2.7L5 0 6 1 2.2 5 0 2.7 1 1.5z\" />\n      </svg>\n    `;\n  }\n\n  /**\n   * The text for the checked state.\n   */\n  @property({ attribute: 'checked-text' })\n  checkedText = '';\n\n  /**\n   * Toggle size.\n   */\n  @property({ reflect: true })\n  size = TOGGLE_SIZE.REGULAR;\n\n  /**\n   * The text for the unchecked state.\n   */\n  @property({ attribute: 'unchecked-text' })\n  uncheckedText = '';\n\n  render() {\n    const { checked, checkedText, disabled, labelText, name, size, uncheckedText, value, _handleChange: handleChange } = this;\n    const inputClasses = classMap({\n      [`${prefix}--toggle-input`]: true,\n      [`${prefix}--toggle-input--${size}`]: size,\n    });\n    return html`\n      <input\n        id=\"checkbox\"\n        type=\"checkbox\"\n        class=\"${inputClasses}\"\n        aria-checked=\"${String(Boolean(checked))}\"\n        .checked=\"${checked}\"\n        ?disabled=\"${disabled}\"\n        name=\"${ifNonNull(name)}\"\n        value=\"${ifNonNull(value)}\"\n        @change=\"${handleChange}\" />\n      <label for=\"checkbox\" class=\"${prefix}--toggle-input__label\">\n        <slot name=\"label-text\">${labelText}</slot>\n        <span class=\"${prefix}--toggle__switch\">\n          ${this._renderCheckmark()}\n          <span class=\"${prefix}--toggle__text--off\" aria-hidden=\"true\">\n            <slot name=\"unchecked-text\">${uncheckedText}</slot>\n          </span>\n          <span class=\"${prefix}--toggle__text--on\" aria-hidden=\"true\">\n            <slot name=\"checked-text\">${checkedText}</slot>\n          </span>\n        </span>\n      </label>\n    `;\n  }\n\n  /**\n   * The name of the custom event fired after this changebox changes its checked state.\n   */\n  static get eventChange() {\n    return `${prefix}-toggle-changed`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXToggle;\n"],"file":"toggle.js"}