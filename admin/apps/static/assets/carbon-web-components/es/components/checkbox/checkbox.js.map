{"version":3,"sources":["components/checkbox/checkbox.ts"],"names":["classMap","html","property","query","customElement","LitElement","settings","ifNonNull","FocusMixin","FormMixin","styles","prefix","BXCheckbox","checked","indeterminate","_checkboxNode","eventChange","constructor","dispatchEvent","CustomEvent","bubbles","composed","detail","event","formData","disabled","name","value","append","type","Boolean","reflect","attribute","attachShadow","mode","delegatesFocus","Number","exec","navigator","userAgent","hideLabel","labelText","_handleChange","handleChange","labelClasses","String"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit-html/directives/class-map';\nimport { html, property, query, customElement, LitElement } from 'lit-element';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport ifNonNull from '../../globals/directives/if-non-null';\nimport FocusMixin from '../../globals/mixins/focus';\nimport FormMixin from '../../globals/mixins/form';\nimport styles from './checkbox.scss';\n\nconst { prefix } = settings;\n\n/**\n * Check box.\n * @element bx-checkbox\n * @fires bx-checkbox-changed - The custom event fired after this changebox changes its checked state.\n * @csspart input The checkbox.\n * @csspart label The label.\n */\n@customElement(`${prefix}-checkbox`)\nclass BXCheckbox extends FocusMixin(FormMixin(LitElement)) {\n  @query('input')\n  protected _checkboxNode!: HTMLInputElement;\n\n  /**\n   * Handles `click` event on the `<input>` in the shadow DOM.\n   */\n  protected _handleChange() {\n    const { checked, indeterminate } = this._checkboxNode;\n    this.checked = checked;\n    this.indeterminate = indeterminate;\n    const { eventChange } = this.constructor as typeof BXCheckbox;\n    this.dispatchEvent(\n      new CustomEvent(eventChange, {\n        bubbles: true,\n        composed: true,\n        detail: {\n          indeterminate,\n        },\n      })\n    );\n  }\n\n  _handleFormdata(event: Event) {\n    const { formData } = event as any; // TODO: Wait for `FormDataEvent` being available in `lib.dom.d.ts`\n    const { checked, disabled, name, value = 'on' } = this;\n    if (!disabled && checked) {\n      formData.append(name, value);\n    }\n  }\n\n  /**\n   * `true` if the check box should be checked.\n   */\n  @property({ type: Boolean, reflect: true })\n  checked = false;\n\n  /**\n   * `true` if the check box should be disabled.\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  /**\n   * `true` if the label should be hidden.\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'hide-label' })\n  hideLabel = false;\n\n  /**\n   * `true` if the check box should show its UI of the indeterminate state.\n   */\n  @property({ type: Boolean, reflect: true })\n  indeterminate = false;\n\n  /**\n   * The label text.\n   */\n  @property({ attribute: 'label-text' })\n  labelText = '';\n\n  /**\n   * The form name.\n   */\n  @property()\n  name!: string;\n\n  /**\n   * The value.\n   */\n  @property()\n  value!: string;\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: 'open',\n      delegatesFocus: Number((/Safari\\/(\\d+)/.exec(navigator.userAgent) ?? ['', 0])[1]) <= 537,\n    });\n  }\n\n  render() {\n    const { checked, disabled, hideLabel, indeterminate, labelText, name, value, _handleChange: handleChange } = this;\n    const labelClasses = classMap({\n      [`${prefix}--checkbox-label`]: true,\n      [`${prefix}--visually-hidden`]: hideLabel,\n    });\n    return html`\n      <input\n        id=\"checkbox\"\n        type=\"checkbox\"\n        part=\"input\"\n        class=\"${`${prefix}--checkbox`}\"\n        aria-checked=\"${indeterminate ? 'mixed' : String(Boolean(checked))}\"\n        .checked=\"${checked}\"\n        ?disabled=\"${disabled}\"\n        .indeterminate=\"${indeterminate}\"\n        name=\"${ifNonNull(name)}\"\n        value=\"${ifNonNull(value)}\"\n        @change=\"${handleChange}\" />\n      <label for=\"checkbox\" part=\"label\" class=\"${labelClasses}\">\n        <span class=\"${prefix}--checkbox-label-text\"><slot>${labelText}</slot></span>\n      </label>\n    `;\n  }\n\n  /**\n   * The name of the custom event fired after this changebox changes its checked state.\n   */\n  static get eventChange() {\n    return `${prefix}-checkbox-changed`;\n  }\n\n  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader\n}\n\nexport default BXCheckbox;\n"],"file":"checkbox.js"}