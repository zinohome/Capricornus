{"version":3,"sources":["components/radio-button/radio-button-group.ts"],"names":["html","property","customElement","LitElement","settings","FormMixin","HostListenerMixin","HostListener","find","forEach","RADIO_BUTTON_LABEL_POSITION","RADIO_BUTTON_ORIENTATION","styles","prefix","BXRadioButtonGroup","selectorRadioButton","constructor","selected","querySelectorAll","elem","checked","oldValue","value","eventChange","dispatchEvent","CustomEvent","bubbles","composed","detail","event","formData","disabled","name","append","type","Boolean","reflect","attribute","RIGHT","HORIZONTAL","changedProperties","has"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html, property, customElement, LitElement } from 'lit-element';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport FormMixin from '../../globals/mixins/form';\nimport HostListenerMixin from '../../globals/mixins/host-listener';\nimport HostListener from '../../globals/decorators/host-listener';\nimport { find, forEach } from '../../globals/internal/collection-helpers';\nimport { RADIO_BUTTON_LABEL_POSITION, RADIO_BUTTON_ORIENTATION } from './defs';\nimport BXRadioButton from './radio-button';\nimport styles from './radio-button.scss';\n\nexport { RADIO_BUTTON_ORIENTATION };\n\nconst { prefix } = settings;\n\n/**\n * Radio button group.\n * @element bx-radio-button-group\n * @fires bx-radio-button-group-changed - The custom event fired after this radio button group changes its selected item.\n */\n@customElement(`${prefix}-radio-button-group`)\nclass BXRadioButtonGroup extends FormMixin(HostListenerMixin(LitElement)) {\n  /**\n   * Handles user-initiated change in selected radio button.\n   */\n  @HostListener('eventChangeRadioButton')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleAfterChangeRadioButton = () => {\n    const { selectorRadioButton } = this.constructor as typeof BXRadioButtonGroup;\n    const selected = find(this.querySelectorAll(selectorRadioButton), elem => (elem as BXRadioButton).checked);\n    const oldValue = this.value;\n    this.value = selected && selected.value;\n    if (oldValue !== this.value) {\n      const { eventChange } = this.constructor as typeof BXRadioButtonGroup;\n      this.dispatchEvent(\n        new CustomEvent(eventChange, {\n          bubbles: true,\n          composed: true,\n          detail: {\n            value: this.value,\n          },\n        })\n      );\n    }\n  };\n\n  _handleFormdata(event: Event) {\n    const { formData } = event as any; // TODO: Wait for `FormDataEvent` being available in `lib.dom.d.ts`\n    const { disabled, name, value } = this;\n    if (!disabled && typeof name !== 'undefined' && typeof value !== 'undefined') {\n      formData.append(name, value);\n    }\n  }\n\n  /**\n   * `true` if the check box should be disabled.\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  /**\n   * The label position.\n   */\n  @property({ reflect: true, attribute: 'label-position' })\n  labelPosition = RADIO_BUTTON_LABEL_POSITION.RIGHT;\n\n  /**\n   * The `name` attribute for the `<input>` for selection.\n   */\n  @property()\n  name!: string;\n\n  /**\n   * The orientation to lay out radio buttons.\n   */\n  @property({ reflect: true })\n  orientation = RADIO_BUTTON_ORIENTATION.HORIZONTAL;\n\n  /**\n   * The `value` attribute for the `<input>` for selection.\n   */\n  @property()\n  value!: string;\n\n  updated(changedProperties) {\n    const { selectorRadioButton } = this.constructor as typeof BXRadioButtonGroup;\n    ['disabled', 'labelPosition', 'orientation', 'name'].forEach(name => {\n      if (changedProperties.has(name)) {\n        const { [name as keyof BXRadioButtonGroup]: value } = this;\n        // Propagate the property to descendants until `:host-context()` gets supported in all major browsers\n        forEach(this.querySelectorAll(selectorRadioButton), elem => {\n          (elem as BXRadioButton)[name] = value;\n        });\n      }\n    });\n    if (changedProperties.has('value')) {\n      const { value } = this;\n      forEach(this.querySelectorAll(selectorRadioButton), elem => {\n        (elem as BXRadioButton).checked = value === (elem as BXRadioButton).value;\n      });\n    }\n  }\n\n  render() {\n    return html`<slot></slot>`;\n  }\n\n  /**\n   * A selector that will return the radio buttons.\n   */\n  static get selectorRadioButton() {\n    return `${prefix}-radio-button`;\n  }\n\n  /**\n   * The name of the custom event fired after this radio button group changes its selected item.\n   */\n  static get eventChange() {\n    return `${prefix}-radio-button-group-changed`;\n  }\n\n  /**\n   * The name of the custom event fired after a radio button changes its checked state.\n   */\n  static get eventChangeRadioButton() {\n    return `${prefix}-radio-button-changed`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXRadioButtonGroup;\n"],"file":"radio-button-group.js"}