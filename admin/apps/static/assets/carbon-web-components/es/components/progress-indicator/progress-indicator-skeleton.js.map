{"version":3,"sources":["components/progress-indicator/progress-indicator-skeleton.ts"],"names":["html","property","customElement","LitElement","settings","forEach","styles","prefix","BXProgressIndicatorSkeleton","type","Boolean","reflect","changedProperties","has","querySelectorAll","constructor","selectorStep","item","vertical"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAT,EAAeC,QAAf,EAAyBC,aAAzB,EAAwCC,UAAxC,QAA0D,aAA1D;AACA,OAAOC,QAAP,MAAqB,0CAArB;AACA,SAASC,OAAT,QAAwB,2CAAxB;AAEA,OAAOC,MAAP,MAAmB,+BAAnB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaH,QAAnB;AAEA;AACA;AACA;;IAEMI,2B,cADLN,aAAa,CAAE,GAAEK,MAAO,8BAAX,C;AAAd,QACMC,2BADN,qBACqD;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;OAA/CA,2B;;;mBAIHP,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAEC,OAAR;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAD,C;;;;eACE,K;;;;;;;AAJX;AACF;AACA;AAIE,uBAAQC,iBAAR,EAA2B;AACzB,YAAIA,iBAAiB,CAACC,GAAlB,CAAsB,UAAtB,CAAJ,EAAuC;AACrC;AACAR,UAAAA,OAAO,CAAC,KAAKS,gBAAL,CAAuB,KAAKC,WAAN,CAAyDC,YAA/E,CAAD,EAA+FC,IAAI,IAAI;AAC3GA,YAAAA,IAAD,CAAiCC,QAAjC,GAA4C,KAAKA,QAAjD;AACD,WAFM,CAAP;AAGD;AACF;;;;aAED,kBAAS;AACP,eAAOlB,IAAP;AACD;AAED;AACF;AACA;;;;;;aACE,wBAA0B;AACxB,eAAQ,GAAEO,MAAO,yBAAjB;AACD;;;;;;;eAEeD,M;;;;;GA3BwBH,U;;AA8B1C,eAAeK,2BAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html, property, customElement, LitElement } from 'lit-element';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { forEach } from '../../globals/internal/collection-helpers';\nimport BXProgressStepSkeleton from './progress-step-skeleton';\nimport styles from './progress-indicator.scss';\n\nconst { prefix } = settings;\n\n/**\n * Skeleton of progress indicator.\n */\n@customElement(`${prefix}-progress-indicator-skeleton`)\nclass BXProgressIndicatorSkeleton extends LitElement {\n  /**\n   * `true` if the progress indicator should be vertical. Corresponds to the attribute with the same name.\n   */\n  @property({ type: Boolean, reflect: true })\n  vertical = false;\n\n  updated(changedProperties) {\n    if (changedProperties.has('vertical')) {\n      // Propagate `vertical` attribute to descendants until `:host-context()` gets supported in all major browsers\n      forEach(this.querySelectorAll((this.constructor as typeof BXProgressIndicatorSkeleton).selectorStep), item => {\n        (item as BXProgressStepSkeleton).vertical = this.vertical;\n      });\n    }\n  }\n\n  render() {\n    return html`<slot></slot>`;\n  }\n\n  /**\n   * A selector that will return progress steps.\n   */\n  static get selectorStep() {\n    return `${prefix}-progress-step-skeleton`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXProgressIndicatorSkeleton;\n"],"file":"progress-indicator-skeleton.js"}