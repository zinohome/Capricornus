{"version":3,"sources":["components/progress-indicator/progress-indicator.ts"],"names":["html","property","customElement","LitElement","settings","forEach","styles","prefix","BXProgressIndicator","type","Boolean","reflect","hasAttribute","setAttribute","changedProperties","has","querySelectorAll","constructor","selectorStep","item","vertical"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAT,EAAeC,QAAf,EAAyBC,aAAzB,EAAwCC,UAAxC,QAA0D,aAA1D;AACA,OAAOC,QAAP,MAAqB,0CAArB;AACA,SAASC,OAAT,QAAwB,2CAAxB;AAEA,OAAOC,MAAP,MAAmB,+BAAnB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaH,QAAnB;AAEA;AACA;AACA;AACA;;IAEMI,mB,cADLN,aAAa,CAAE,GAAEK,MAAO,qBAAX,C;AAAd,QACMC,mBADN,qBAC6C;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;OAAvCA,mB;;;mBAIHP,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAEC,OAAR;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAD,C;;;;eACE,K;;;;;;;AAJX;AACF;AACA;AAIE,mCAAoB;AAClB,YAAI,CAAC,KAAKC,YAAL,CAAkB,MAAlB,CAAL,EAAgC;AAC9B,eAAKC,YAAL,CAAkB,MAAlB,EAA0B,MAA1B;AACD;;AACD,6BAXEL,mBAWF;AACD;;;;aAED,iBAAQM,iBAAR,EAA2B;AACzB,YAAIA,iBAAiB,CAACC,GAAlB,CAAsB,UAAtB,CAAJ,EAAuC;AACrC;AACAV,UAAAA,OAAO,CAAC,KAAKW,gBAAL,CAAuB,KAAKC,WAAN,CAAiDC,YAAvE,CAAD,EAAuFC,IAAI,IAAI;AACnGA,YAAAA,IAAD,CAAyBC,QAAzB,GAAoC,KAAKA,QAAzC;AACD,WAFM,CAAP;AAGD;AACF;;;;aAED,kBAAS;AACP,eAAOpB,IAAP;AACD;AAED;AACF;AACA;;;;;;aACE,wBAA0B;AACxB,eAAQ,GAAEO,MAAO,gBAAjB;AACD;;;;;;;eAEeD,M;;;;;GAlCgBH,U;;AAqClC,eAAeK,mBAAf","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html, property, customElement, LitElement } from 'lit-element';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { forEach } from '../../globals/internal/collection-helpers';\nimport BXProgressStep from './progress-step';\nimport styles from './progress-indicator.scss';\n\nconst { prefix } = settings;\n\n/**\n * Progress indicator.\n * @element bx-progress-indicator\n */\n@customElement(`${prefix}-progress-indicator`)\nclass BXProgressIndicator extends LitElement {\n  /**\n   * `true` if the progress indicator should be vertical.\n   */\n  @property({ type: Boolean, reflect: true })\n  vertical = false;\n\n  connectedCallback() {\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'list');\n    }\n    super.connectedCallback();\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('vertical')) {\n      // Propagate `vertical` attribute to descendants until `:host-context()` gets supported in all major browsers\n      forEach(this.querySelectorAll((this.constructor as typeof BXProgressIndicator).selectorStep), item => {\n        (item as BXProgressStep).vertical = this.vertical;\n      });\n    }\n  }\n\n  render() {\n    return html`<slot></slot>`;\n  }\n\n  /**\n   * A selector that will return progress steps.\n   */\n  static get selectorStep() {\n    return `${prefix}-progress-step`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXProgressIndicator;\n"],"file":"progress-indicator.js"}