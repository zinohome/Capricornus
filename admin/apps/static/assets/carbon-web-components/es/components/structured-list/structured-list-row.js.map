{"version":3,"sources":["components/structured-list/structured-list-row.ts"],"names":["settings","ifDefined","html","property","query","customElement","LitElement","CheckmarkFilled16","HostListener","HostListenerMixin","RadioGroupManager","NAVIGATION_DIRECTION","styles","prefix","navigationDirectionForKey","ArrowUp","BACKWARD","Up","ArrowDown","FORWARD","Down","StructuredListRowRadioButtonDelegate","constructor","row","_row","checked","selected","tabIndex","name","selectionName","compareDocumentPosition","other","focus","BXStructuredListRow","_inputNode","inputNode","_manager","select","_radioButtonDelegate","event","manager","navigationDirection","key","navigate","type","Boolean","reflect","attribute","hasAttribute","setAttribute","get","getRootNode","composed","add","delete","changedProperties","has","shouldBeFocusable","selectionValue","selectionIconTitle","class","title"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport { html, property, query, customElement, LitElement } from 'lit-element';\nimport CheckmarkFilled16 from '@carbon/icons/lib/checkmark--filled/16';\nimport HostListener from '../../globals/decorators/host-listener';\nimport HostListenerMixin from '../../globals/mixins/host-listener';\nimport RadioGroupManager, { NAVIGATION_DIRECTION, ManagedRadioButtonDelegate } from '../../globals/internal/radio-group-manager';\nimport styles from './structured-list.scss';\n\nconst { prefix } = settings;\n\n/**\n * Map of navigation direction by key.\n */\nconst navigationDirectionForKey = {\n  ArrowUp: NAVIGATION_DIRECTION.BACKWARD,\n  Up: NAVIGATION_DIRECTION.BACKWARD, // IE\n  ArrowDown: NAVIGATION_DIRECTION.FORWARD,\n  Down: NAVIGATION_DIRECTION.FORWARD, // IE\n};\n\n/**\n * The interface for `RadioGroupManager` for structured list row.\n */\nclass StructuredListRowRadioButtonDelegate implements ManagedRadioButtonDelegate {\n  /**\n   * The structured list row to target.\n   */\n  private _row: BXStructuredListRow;\n\n  constructor(row: BXStructuredListRow) {\n    this._row = row;\n  }\n\n  get checked() {\n    return this._row.selected;\n  }\n\n  set checked(checked) {\n    this._row.selected = checked;\n    this._row.tabIndex = checked ? 0 : -1;\n  }\n\n  get tabIndex() {\n    return this._row.tabIndex;\n  }\n\n  set tabIndex(tabIndex) {\n    this._row.tabIndex = tabIndex;\n  }\n\n  get name() {\n    return this._row.selectionName;\n  }\n\n  compareDocumentPosition(other: StructuredListRowRadioButtonDelegate) {\n    return this._row.compareDocumentPosition(other._row);\n  }\n\n  focus() {\n    this._row.focus();\n  }\n}\n\n/**\n * Structured list row.\n * @element bx-structured-list-row\n */\n@customElement(`${prefix}-structured-list-row`)\nclass BXStructuredListRow extends HostListenerMixin(LitElement) {\n  /**\n   * The radio group manager associated with the radio button.\n   */\n  private _manager: RadioGroupManager | null = null;\n\n  /**\n   * The interface for `RadioGroupManager` for structured list row.\n   */\n  private _radioButtonDelegate = new StructuredListRowRadioButtonDelegate(this);\n\n  /**\n   * The hidden radio button.\n   */\n  @query('#input')\n  private _inputNode!: HTMLInputElement;\n\n  /**\n   * Handles `click` event on this element.\n   */\n  @HostListener('click')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleClick = () => {\n    const { _inputNode: inputNode } = this;\n    if (inputNode) {\n      this.selected = true;\n      if (this._manager) {\n        this._manager.select(this._radioButtonDelegate);\n      }\n    }\n  };\n\n  /**\n   * Handles `keydown` event on this element.\n   */\n  @HostListener('keydown')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleKeydown = (event: KeyboardEvent) => {\n    const { _inputNode: inputNode } = this;\n    const manager = this._manager;\n    if (inputNode && manager) {\n      const navigationDirection = navigationDirectionForKey[event.key];\n      if (navigationDirection) {\n        manager.select(manager.navigate(this._radioButtonDelegate, navigationDirection));\n      }\n      if (event.key === ' ' || event.key === 'Enter') {\n        manager.select(this._radioButtonDelegate);\n      }\n    }\n  };\n\n  /**\n   * `true` if this structured list row should be selectable and selected.\n   */\n  @property({ type: Boolean, reflect: true })\n  selected = false;\n\n  /**\n   * The `name` attribute for the `<input>` for selection.\n   * If present, this structured list row will be a selectable one.\n   */\n  @property({ attribute: 'selection-name' })\n  selectionName = '';\n\n  /**\n   * The `value` attribute for the `<input>` for selection.\n   */\n  @property({ attribute: 'selection-value' })\n  selectionValue = '';\n\n  /**\n   * The content to put into the `<title>` attribute of the selection icon.\n   */\n  @property({ attribute: 'selection-icon-title' })\n  selectionIconTitle = '';\n\n  connectedCallback() {\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'row');\n    }\n    super.connectedCallback();\n    if (!this._manager) {\n      this._manager = RadioGroupManager.get(this.getRootNode({ composed: true }) as Document);\n      const { selectionName } = this;\n      if (selectionName) {\n        this._manager?.add(this._radioButtonDelegate);\n      }\n    }\n  }\n\n  disconnectedCallback() {\n    if (this._manager) {\n      this._manager.delete(this._radioButtonDelegate);\n    }\n    super.disconnectedCallback();\n  }\n\n  updated(changedProperties) {\n    const { _manager: manager, selectionName } = this;\n    if (changedProperties.has('selectionName')) {\n      if (manager) {\n        manager.delete(this._radioButtonDelegate, changedProperties.get('selectionName'));\n        if (selectionName) {\n          manager.add(this._radioButtonDelegate);\n        }\n      }\n      this.setAttribute(\n        'tabindex',\n        !selectionName || !manager || !manager.shouldBeFocusable(this._radioButtonDelegate) ? '-1' : '0'\n      );\n    }\n  }\n\n  render() {\n    const { selected, selectionName, selectionValue, selectionIconTitle } = this;\n    if (selectionName) {\n      // \"Selected\" style with `.bx--structured-list-td` does not work somehow - Need investigation\n      return html`\n        <slot></slot>\n        <input\n          id=\"input\"\n          type=\"radio\"\n          class=\"${prefix}--structured-list-input\"\n          .checked=${selected}\n          name=${selectionName}\n          value=${ifDefined(selectionValue)} />\n        <div class=\"${prefix}--structured-list-td ${prefix}--structured-list-cell\">\n          ${CheckmarkFilled16({\n            class: `${prefix}--structured-list-svg`,\n            title: selectionIconTitle,\n          })}\n        </div>\n      `;\n    }\n    return html`<slot></slot>`;\n  }\n\n  static styles = styles;\n}\n\nexport default BXStructuredListRow;\n"],"file":"structured-list-row.js"}