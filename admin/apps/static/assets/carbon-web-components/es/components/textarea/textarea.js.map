{"version":3,"sources":["components/textarea/textarea.ts"],"names":["customElement","LitElement","html","property","query","classMap","settings","WarningFilled16","ifNonEmpty","ifNonNull","FormMixin","ValidityMixin","TEXTAREA_COLOR_SCHEME","styles","prefix","BXTextarea","target","value","event","formData","disabled","name","append","type","Boolean","attribute","reflect","REGULAR","attachShadow","mode","delegatesFocus","Number","exec","navigator","userAgent","invalidIcon","class","textareaClasses","colorScheme","invalid","labelClasses","helperTextClasses","labelText","autocomplete","autofocus","cols","pattern","placeholder","readonly","required","rows","_handleInput","helperText","validityMessage"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { customElement, LitElement, html, property, query } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport WarningFilled16 from '@carbon/icons/lib/warning--filled/16';\nimport ifNonEmpty from '../../globals/directives/if-non-empty';\nimport ifNonNull from '../../globals/directives/if-non-null';\nimport FormMixin from '../../globals/mixins/form';\nimport ValidityMixin from '../../globals/mixins/validity';\nimport { TEXTAREA_COLOR_SCHEME } from './defs';\nimport styles from './textarea.scss';\n\nexport { TEXTAREA_COLOR_SCHEME };\n\nconst { prefix } = settings;\n\n/**\n * Text area.\n * @element bx-textarea\n * @slot helper-text - The helper text.\n * @slot label-text - The label text.\n * @slot validity-message - The validity message. If present and non-empty, this input shows the UI of its invalid state.\n */\n@customElement(`${prefix}-textarea`)\nexport default class BXTextarea extends ValidityMixin(FormMixin(LitElement)) {\n  /**\n   * Handles `oninput` event on the `<input>`.\n   * @param event The event.\n   */\n  private _handleInput({ target }: Event) {\n    this.value = (target as HTMLTextAreaElement).value;\n  }\n\n  _handleFormdata(event: Event) {\n    const { formData } = event as any; // TODO: Wait for `FormDataEvent` being available in `lib.dom.d.ts`\n    const { disabled, name, value } = this;\n    if (!disabled) {\n      formData.append(name, value);\n    }\n  }\n\n  /**\n   * May be any of the standard HTML autocomplete options\n   */\n  @property()\n  autocomplete = '';\n\n  /**\n   * Sets the textarea to be focussed automatically on page load. Defaults to false\n   */\n  @property({ type: Boolean })\n  autofocus = false;\n\n  /**\n   * The color scheme.\n   */\n  @property({ attribute: 'color-scheme', reflect: true })\n  colorScheme = TEXTAREA_COLOR_SCHEME.REGULAR;\n\n  /**\n   * The number of columns for the textarea to show by default\n   */\n  @property()\n  cols = 50;\n\n  /**\n   * Controls the disabled state of the textarea\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  /**\n   * The helper text.\n   */\n  @property({ attribute: 'helper-text' })\n  helperText = '';\n\n  /**\n   * ID to link the `label` and `textarea`\n   */\n  @property()\n  id = '';\n\n  /**\n   * Controls the invalid state and visibility of the `validityMessage`\n   */\n  @property({ type: Boolean, reflect: true })\n  invalid = false;\n\n  /**\n   * The label text.\n   */\n  @property({ attribute: 'label-text' })\n  labelText = '';\n\n  /**\n   * Name for the textarea in the `FormData`\n   */\n  @property()\n  name = '';\n\n  /**\n   * Pattern to validate the textarea against for HTML validity checking\n   */\n  @property()\n  pattern = '';\n\n  /**\n   * Value to display when the textarea has an empty `value`\n   */\n  @property({ reflect: true })\n  placeholder = '';\n\n  /**\n   * Controls the readonly state of the textarea\n   */\n  @property({ type: Boolean, reflect: true })\n  readonly = false;\n\n  /**\n   * Boolean property to set the required status\n   */\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  /**\n   * The special validity message for `required`.\n   */\n  @property({ attribute: 'required-validity-message' })\n  requiredValidityMessage = 'Please fill out this field.';\n\n  /**\n   * The number of rows for the textarea to show by default\n   */\n  @property()\n  rows = 4;\n\n  /**\n   * The validity message.\n   */\n  @property({ attribute: 'validity-message' })\n  validityMessage = '';\n\n  /**\n   * The value of the text area.\n   */\n  @property()\n  value = '';\n\n  /**\n   * Get a reference to the underlying textarea so we can directly apply values.\n   * This lets us fixe a bug where after a user would clear text, the value wouldn't update programmatically\n   */\n  @query('textarea')\n  protected _textarea!: HTMLTextAreaElement;\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: 'open',\n      delegatesFocus: Number((/Safari\\/(\\d+)/.exec(navigator.userAgent) ?? ['', 0])[1]) <= 537,\n    });\n  }\n\n  render() {\n    const invalidIcon = WarningFilled16({ class: `${prefix}--text-area__invalid-icon` });\n\n    const textareaClasses = classMap({\n      [`${prefix}--text-area`]: true,\n      [`${prefix}--text-area--v2`]: true,\n      [`${prefix}--text-area--${this.colorScheme}`]: this.colorScheme,\n      [`${prefix}--text-area--invalid`]: this.invalid,\n    });\n\n    const labelClasses = classMap({\n      [`${prefix}--label`]: true,\n      [`${prefix}--label--disabled`]: this.disabled,\n    });\n\n    const helperTextClasses = classMap({\n      [`${prefix}--form__helper-text`]: true,\n      [`${prefix}--form__helper-text--disabled`]: this.disabled,\n    });\n\n    return html`\n      <label class=\"${labelClasses}\" for=\"input\">\n        <slot name=\"label-text\"> ${this.labelText} </slot>\n      </label>\n      <div class=\"${prefix}--text-area__wrapper\" ?data-invalid=\"${this.invalid}\">\n        ${this.invalid ? invalidIcon : null}\n        <textarea\n          ?autocomplete=\"${this.autocomplete}\"\n          ?autofocus=\"${this.autofocus}\"\n          class=\"${textareaClasses}\"\n          cols=\"${ifNonNull(this.cols)}\"\n          ?data-invalid=\"${this.invalid}\"\n          ?disabled=\"${this.disabled}\"\n          id=\"input\"\n          name=\"${ifNonEmpty(this.name)}\"\n          pattern=\"${ifNonEmpty(this.pattern)}\"\n          placeholder=\"${ifNonEmpty(this.placeholder)}\"\n          ?readonly=\"${this.readonly}\"\n          ?required=\"${this.required}\"\n          rows=\"${ifNonNull(this.rows)}\"\n          .value=\"${this.value}\"\n          @input=\"${this._handleInput}\"></textarea>\n      </div>\n      <div class=\"${helperTextClasses}\">\n        <slot name=\"helper-text\"> ${this.helperText} </slot>\n      </div>\n      <div class=\"${prefix}--form-requirement\">\n        <slot name=\"validity-message\"> ${this.validityMessage} </slot>\n      </div>\n    `;\n  }\n\n  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader\n}\n"],"file":"textarea.js"}